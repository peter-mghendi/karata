@implements IGameInterface

<MudGrid Spacing="4" Justify="Justify.Center">
    <MudItem xs="6">
        <MudPaper Class="pa-4" Elevation="0">
            <MudText>Top Card: @Game.Pile.Peek().GetName()</MudText>
            @if (Game.CurrentRequest is Card request)
            {
                <MudText>
                    Current Request: @(request.Face is None ? request.Suit.ToString() : request.GetName())
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="pa-4" Elevation="0">

            <MudText>Player Hands:</MudText>
            @foreach (var hand in otherHands)
            {
                <MudText>@(hand.User.Email) has @(hand.Cards.Count) cards.</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<MudGrid Spacing="4" Justify="Justify.Center">
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="0">
            <MudListSubheader>
                My Cards (click to add to turn)
            </MudListSubheader>
            <MudList Clickable="true">
                @foreach (var card in currentHand)
                {
                    <MudListItem Text="@card.GetName()" Icon="@Icons.Rounded.Add" IconColor="Color.Success" OnClick="() => AddCardToTurn(card)" />
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Elevation="0">
            <MudListSubheader>
                This turn (click to remove)
            </MudListSubheader>
            <MudList Clickable="true">
                @foreach (var card in Turn)
                {
                    <MudListItem Text="@card.GetName()" Icon="@Icons.Rounded.Remove" IconColor="Color.Error" OnClick="() => RemoveCardFromTurn(card)" />
                }
            </MudList>
        </MudPaper>
    </MudItem>
</MudGrid>


@code
{
    [Parameter]
    public UIGame Game { get; set; }

    [Parameter]
    public UIHand Hand { get; set; }

    [Parameter]
    public List<Card> Turn { get; set; } = new();

    [Parameter]
    public EventCallback<Card> OnAddCardToTurn { get; set; }

    [Parameter]
    public EventCallback<Card> OnRemoveCardFromTurn { get; set; }

    private List<Card> currentHand => Hand.Cards.Where(c => !Turn.Contains(c)).ToList();

    private List<UIHand> otherHands => Game.Hands.Where(h => h.User.Id != Hand.User.Id).ToList();
  
    private void AddCardToTurn(Card card) => OnAddCardToTurn.InvokeAsync(card);

    private void RemoveCardFromTurn(Card card) => OnRemoveCardFromTurn.InvokeAsync(card);
}