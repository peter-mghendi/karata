@using System.Text.Json
@using System.Collections.Immutable
@implements IGameInterface
@inject ILogger<CardListGameInterface> Logger

<MudPaper Class="pa-4 mb-4" Elevation="0">
    <MudGrid Spacing="4" Justify="Justify.Center">
        <MudItem xs="6">
            <MudList Clickable Color="Color.Info">
                <MudListSubheader>Game Info:</MudListSubheader>
                <MudAlert Class="mb-4" Severity="@(Game.Pile.Peek().GetColor() == Red ? Severity.Error : Severity.Normal)" Icon="@GetIcon(Game.Pile.Peek())">
                    Top card: @Game.Pile.Peek().GetName()
                </MudAlert>
                @if (Game.CurrentRequest is not null)
                {
                    <MudAlert Class="mb-4" Severity="@(Game.CurrentRequest.GetColor() == Red ? Severity.Error : Severity.Normal)" Icon="@GetIcon(Game.CurrentRequest)">
                        Current request: @(Game.CurrentRequest.Face is None ? Game.CurrentRequest.Suit.ToString() : Game.CurrentRequest.GetName())
                    </MudAlert>
                }
                <MudAlert Class="mb-4" Severity="@Severity.Info" Icon="@Icons.Rounded.Person">
                    Current player: @Game.Hands[Game.CurrentTurn].User!.Email.
                </MudAlert>
            </MudList>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudList Clickable Color="Color.Info">
                <MudListSubheader>Player Hands:</MudListSubheader>
                @foreach (var hand in OtherHands)
                {
                    <MudListItem Avatar="@Icons.Rounded.Person">
                        @(hand.User!.Email) has @(hand.Cards.Count) cards.
                    </MudListItem>
                }
            </MudList>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((DropItem item, string dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1 gap-4">
    <ChildContent>
        <div class="d-flex flex-wrap justify-space-between gap-4">
            <MudDropZone T="DropItem" Identifier="Hand" Class="rounded pa-4 flex-grow-1 overflow-y-scroll" Style="background-color: white">
                <MudText Typo="Typo.h6" Class="mb-4">My Cards</MudText>
            </MudDropZone>
            <MudDropZone T="DropItem" Identifier="Turn" Class="rounded pa-4 flex-grow-1" Style="background-color: white" AllowReorder>
                <MudText Typo="Typo.h6" Class="mb-4">Current Turn</MudText>
            </MudDropZone>
        </div>
    </ChildContent>
    <ItemRenderer>
        <MudAlert Class="mt-4" Severity="@(context.Card.GetColor() == Red ? Severity.Error : Severity.Normal)" Icon="@GetIcon(@context.Card)">
            @context.Card.GetName()
        </MudAlert>
    </ItemRenderer>
</MudDropContainer>

@code
{
    [Parameter]
    public UIGame Game { get; set; }

    [Parameter]
    public UIHand Hand { get; set; }

    [Parameter]
    public ImmutableList<Card> Turn { get; set; } = ImmutableList<Card>.Empty;

    [Parameter]
    public EventCallback<(Card Card, int Index)> OnAddCardToTurn { get; set; }

    [Parameter]
    public EventCallback<(Card Card, int Index)> OnReorderCardInTurn { get; set; }

    [Parameter]
    public EventCallback<Card> OnRemoveCardFromTurn { get; set; }

    private const string Spade = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-suit-spade-fill\" viewBox=\"0 0 16 16\"><path d=\"M7.184 11.246A3.5 3.5 0 0 1 1 9c0-1.602 1.14-2.633 2.66-4.008C4.986 3.792 6.602 2.33 8 0c1.398 2.33 3.014 3.792 4.34 4.992C13.86 6.367 15 7.398 15 9a3.5 3.5 0 0 1-6.184 2.246 19.92 19.92 0 0 0 1.582 2.907c.231.35-.02.847-.438.847H6.04c-.419 0-.67-.497-.438-.847a19.919 19.919 0 0 0 1.582-2.907z\"/></svg>";
    private const string Heart = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-suit-heart-fill\" viewBox=\"0 0 16 16\"><path d=\"M4 1c2.21 0 4 1.755 4 3.92C8 2.755 9.79 1 12 1s4 1.755 4 3.92c0 3.263-3.234 4.414-7.608 9.608a.513.513 0 0 1-.784 0C3.234 9.334 0 8.183 0 4.92 0 2.755 1.79 1 4 1z\"/></svg>";
    private const string Club = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-suit-club-fill\" viewBox=\"0 0 16 16\"><path d=\"M11.5 12.5a3.493 3.493 0 0 1-2.684-1.254 19.92 19.92 0 0 0 1.582 2.907c.231.35-.02.847-.438.847H6.04c-.419 0-.67-.497-.438-.847a19.919 19.919 0 0 0 1.582-2.907 3.5 3.5 0 1 1-2.538-5.743 3.5 3.5 0 1 1 6.708 0A3.5 3.5 0 1 1 11.5 12.5z\"/></svg>";
    private const string Diamond = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-suit-diamond-fill\" viewBox=\"0 0 16 16\"><path d=\"M2.45 7.4 7.2 1.067a1 1 0 0 1 1.6 0L13.55 7.4a1 1 0 0 1 0 1.2L8.8 14.933a1 1 0 0 1-1.6 0L2.45 8.6a1 1 0 0 1 0-1.2z\"/></svg>";

    private List<Card> CurrentHand => Hand.Cards.Where(c => !Turn.Contains(c)).ToList();

    private List<UIHand> OtherHands => Game.Hands.Where(h => h.User!.Id != Hand.User!.Id).ToList();

    private async Task AddCardToTurn(Card card, int index) => await OnAddCardToTurn.InvokeAsync((card, index));

    private async Task ReorderCardInTurn(Card card, int index) => await OnReorderCardInTurn.InvokeAsync((card, Math.Clamp(index, 0, Turn.Count - 1)));

    private async Task RemoveCardFromTurn(Card card) => await OnRemoveCardFromTurn.InvokeAsync(card);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _items.Clear();
        _items.AddRange(CurrentHand.Select(card => new DropItem {Identifier = "Hand", Card = card}));
        _items.AddRange(Turn.Select(card => new DropItem {Identifier = "Turn", Card = card}));
    }

    private async Task ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        var zone = dropItem.DropzoneIdentifier;
        var index = dropItem.IndexInZone;
        var item = dropItem.Item;
        var card = item.Card;

        item.Identifier = zone;

        switch (zone)
        {
            case "Hand":
            {
                if (!CurrentHand.Contains(card)) await RemoveCardFromTurn(card);
                break;
            }
            case "Turn":
            {
                if (!Turn.Contains(card)) await AddCardToTurn(card, index);
                else await ReorderCardInTurn(card, index);
                break;
            }
        }
    }

    // TODO: Proper icons for these
    // HACK: currently using bootstrap SVG icons for suits
    private string GetIcon(Card card) => card.Suit switch
    {
        Spades => Spade,
        Hearts => Heart,
        Clubs => Club,
        Diamonds => Diamond,
        BlackJoker or RedJoker => Icons.Rounded.TheaterComedy,
        _ => throw new ArgumentException($"Invalid suit {card.Suit}", nameof(card))
        };

    private List<DropItem> _items = new();

    public class DropItem
    {
        public string Identifier = "Hand";
        public Card Card { get; init; }
    }
}