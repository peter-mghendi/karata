@inject IToastService Toast

<div>
    <details class="mb-2">
        <summary class="text-info mb-2">
            <i class="bi bi-info-circle me-2"></i>
            <span><strong>Room Details</strong></span>
        </summary>
        <div>
            <p>Room ID: <br> @Room.InviteLink</p>
            <p>Created: <br> @Room.CreatedAt</p>
            <p>Creator: <br> @Room.Creator.Email</p>
            <p>Current: <br> @Game.Hands[Game.CurrentTurn].User.Email</p>
            <p>Players: <br> @Game.Hands.Count</p>
            <p>Started: <br> @Game.IsStarted</p>

            <div class="row g-2">
                @if (Room.Creator.Id == Player.Id && !Game.IsStarted)
                {
                    <div class="col">
                        <button class="btn btn-outline-success w-100" @onclick="StartGame">
                            Start Game
                        </button>
                    </div>
                }
                <div class="col">
                    <button class="btn btn-outline-danger w-100" @onclick="LeaveRoom">
                        Leave Room
                    </button>
                </div>
            </div>
        </div>
    </details>

    <div class="form-floating mb-2">
        <textarea class="form-control" id="message" style="height: 100px" @bind="message"></textarea>
        <label for="message">Type your message:</label>
    </div>
    <button class="btn btn-outline-primary w-100" @onclick="Send">Send</button>

    <hr>

    <ul id="messagesList" class="list-group list-group-flush">
        @foreach (var message in Room.Chats)
        {
            <li class="list-group-item">
                <div class="fw-bold">
                    @if (message.Sender.Id == Player.Id)
                    {
                        <i class="bi bi-person-fill me-2"></i>
                    }
                    @message.Sender
                </div>
                <div class="small textss-muted">@message.Sent</div>
                @message.Text
            </li>
        }
    </ul>
</div>

@code
{
    [Parameter]
    public UIRoom Room { get; set; }

    [Parameter]
    public UIUser Player { get; set; }

    [Parameter]
    public EventCallback<string> OnSend { get; set; }

    [Parameter]
    public EventCallback OnStartGame { get; set; }

    [Parameter]
    public EventCallback OnLeaveRoom { get; set; }

    private UIGame Game => Room.Game;
    private string message;
    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            Toast.ShowError("You must enter a message to send.");
            return;
        }

        await OnSend.InvokeAsync(message);
        message = "";
    }

    private async Task StartGame() => await OnStartGame.InvokeAsync();

    private async Task LeaveRoom() => await OnLeaveRoom.InvokeAsync();
}