@implements IGameInterface

<div id="table">
    @* Me *@
    <div id="bottom" class="hand-container">
        <HandComponent Cards="@currentHand" FaceUp="true" OnCardSelected="AddCardToTurn" />
    </div>

    @* Current Turn *@
    <div id="turn" class="hand-container">
        <HandComponent Cards="@Turn" FaceUp="true" OnCardSelected="RemoveCardFromTurn" />
    </div>

    @* Player 2 *@
    <div id="top" class="hand-container">
        <HandComponent Cards="@otherHands[0].Cards" FaceUp="false" />
    </div>

    @* Player 3 *@
    @if (otherHands.Count > 1)
    {
        <div id="left" class="hand-container">
            <HandComponent Cards="@otherHands[1].Cards" FaceUp="false" />
        </div>
    }

    @* Player 4 *@
    @if (otherHands.Count > 2)
    {
        <div id="right" class="hand-container">
            <HandComponent Cards="@otherHands[2].Cards" FaceUp="false" />
        </div>
    }

    @* Deck and Pile *@
    @* TODO Include @click handlers after all? *@
    <img id="deck" src="img/cards/Back.svg" />
    <img id="pile" src="@ImageUrl(Game.Pile.Peek())" title="@requestText" />
</div>

@code 
{
    [Parameter]
    public UIGame Game { get; set; }

    [Parameter]
    public UIHand Hand { get; set; }

    [Parameter]
    public List<Card> Turn { get; set; } = new();

    [Parameter]
    public EventCallback<Card> OnAddCardToTurn { get; set; }

    [Parameter]
    public EventCallback<Card> OnRemoveCardFromTurn { get; set; }

    private List<Card> currentHand => Hand.Cards.Where(c => !Turn.Contains(c)).ToList();

    private List<UIHand> otherHands => Game.Hands.Where(h => h.User.Id != Hand.User.Id).ToList();

    private string requestText => Game.CurrentRequest switch
    {
        null => "No card has been requested",
        { Face: None } => Game.CurrentRequest.ToString(),
        _ => Game.CurrentRequest.GetName()
    };

    private string ImageUrl(Card card) => card is { Face: Joker }
        ? $"img/cards/{card.Suit.ToString()}.svg"
        : $"img/cards/{card.Face.ToString()}{card.Suit.ToString()}.svg";

    private void AddCardToTurn(Card card) => OnAddCardToTurn.InvokeAsync(card);

    private void RemoveCardFromTurn(Card card) => OnRemoveCardFromTurn.InvokeAsync(card);
}