@using Karata.Cards.Extensions
@using static Karata.Cards.Card
@using static Karata.Cards.Card.CardColor
@using static Karata.Cards.Card.CardFace
@using static Karata.Cards.Card.CardSuit

<div>
    @if (Specific)
    {
        <div class="mb-3 form-floating">
            <select id="faceSelect" class="form-select" @bind="Face">
                @foreach (var face in Enum.GetValues<CardFace>())
                {
                    @if (face is Joker) continue;
                    <option value="@face">@face</option>
                }
            </select>
            <label for="suitSelect" class="form-label">Face:</label>
        </div>
    }
    <div class="mb-3 form-floating">
        <select id="suitSelect" class="form-select" @bind="Suit">
            @foreach (var suit in Enum.GetValues<CardSuit>())
            {
                @if (suit is BlackJoker or RedJoker) continue;
                <option value="@suit">@suit</option>
            }
        </select>
        <label for="suitSelect" class="form-label">Suit:</label>
    </div>
    <div class="d-flex mb-3">
        <button class="btn btn-outline-primary mx-auto" @onclick="SubmitForm">
            Request this card
        </button>
    </div>
    @if (Specific)
    {
        <div class="row mb-3">
            <button class="btn btn-outline-dark col" @onclick="() => RequestJoker(Black)">
                Black Joker
            </button>
            <button class="btn btn-outline-danger col" @onclick="() => RequestJoker(Red)">
                Red Joker
            </button>
        </div>
    }
    
</div>

@code
{
    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public bool Specific { get; set; }
    private CardFace Face { get; set; } = None;
    private CardSuit Suit { get; set; } = Spades;

    private async Task RequestJoker(CardColor color)
    {
        (Face, Suit) = (Joker, color is Black ? BlackJoker : RedJoker);
        await SubmitForm();
    }

    private async Task SubmitForm() =>
        await ModalInstance.CloseAsync(ModalResult.Ok(Face.Of(Suit)));

    async Task Cancel() => await ModalInstance.CancelAsync();
}