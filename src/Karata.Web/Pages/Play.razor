@using System.Net
@using Karata.Web.Services
@using Microsoft.AspNetCore.SignalR.Client

@page "/play"
@attribute [Authorize]

@implements IAsyncDisposable

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (!IsConnected)
{
    <p class="lead">You are not connected to a server</p>
    <p class="text-muted">If this message persists, reload this page to establish a connection.</p>
}
else if (currentRoom is null)
{
    <p class="lead">Join or create a game room to play.</p>

    <div class="my-2">
        <label for="join-room">Join a Room</label>
        <div id="join-room" class="row g-2">
            <div class="col-12 col-md-6">
                <div class="form-floating">
                    <input type="text" class="form-control" id="inviteLink" placeholder="@Guid.Empty" autocomplete="room-code" @bind="inviteLink">
                    <label for="inviteLink">Invite Link</label>
                </div>
            </div>
            <div class="col-12 col-md-6">
                <div class="form-floating">
                    <input type="password" class="form-control" id="invitePassword" placeholder="password" autocomplete="room-pass"
                    @bind="invitePassword">
                    <label for="invitePassword">Password (If Applicable)</label>
                </div>
            </div>
            <div class="col-12">
                <div class="d-flex my-auto">
                    <button class="btn btn-outline-primary align-middle w-100" @onclick="JoinRoom">
                        Join Room
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="my-2">
        <label for="create-room">Create a Room</label>
        <div id="create-room" class="row g-2">
            <div class="col">
                <div class="form-floating">
                    <input type="password" class="form-control" id="createPassword" placeholder="password" autocomplete="new-password"
                    @bind="createPassword">
                    <label for="createPassword">Password (Optional)</label>
                </div>
            </div>
            <div class="col-12">
                <div class="d-flex my-auto">
                    <button class="btn btn-outline-primary align-middle w-100" @onclick="CreateRoom">
                        Create Room
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-8">
                @if (@currentRoom.Game.IsStarted)
                {
                    @if (lastCardIdentifier is not null)
                    {
                        <div class="hstack gap-3 rounded-3 bg-light p-2">
                            <div class="lead me-auto">Are you on your last card?</div>
                            <button class="btn btn-outline-success" @onclick="() => SendLastCardStatus(true)">
                                Yes
                            </button>
                            <div class="vr"></div>
                            <button class="btn btn-outline-danger" @onclick="() => SendLastCardStatus(false)">
                                No
                            </button>
                        </div>
                    }

                    <p>Current Turn: @currentRoom.Game.Players[currentRoom.Game.CurrentTurn].Email</p>
                    <p>Deck Size: @currentRoom.Game.Deck.Count</p>
                    <p>Pile Size: @currentRoom.Game.Pile.Count</p>
                    <p>
                        Top Card:
                        <i class="mx-1 @GetCardIcon(currentRoom.Game.Pile.Peek())"></i>
                        @currentRoom.Game.Pile.Peek().GetName()
                    </p>
                    @if (currentRoom.Game.CurrentRequest is not null)
                    {
                        <p>
                            Current Request:
                            <i class="mx-1 @GetCardIcon(currentRoom.Game.CurrentRequest)"></i>
                            @currentRoom.Game.CurrentRequest.GetName()
                        </p>
                    }
                    <div class="row mb-2">
                        <div class="col-6">
                            <p>My cards:</p>
                            <ul class="list-group list-group-flush">
                                @foreach (var card in currentHand)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>
                                            <i class="@($"bi {GetCardIcon(card)} me-2")"></i>
                                            @card.GetName()
                                        </span>
                                        <button class="btn btn-outline-success" @onclick="() => AddCardToTurn(card)">
                                            <i class="bi bi-plus text-success"></i>
                                        </button>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="col-6">
                            <p>This turn:</p>
                            <ul class="list-group list-group-flush">
                                @foreach (var card in currentTurn)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>
                                            <i class="@($"bi {GetCardIcon(card)} me-2")"></i>
                                            @card.GetName()
                                        </span>
                                        <button class="btn btn-outline-danger" @onclick="() => RemoveCardFromTurn(card)">
                                            <i class="bi bi-trash text-danger"></i>
                                        </button>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>

                    <div class="d-flex">
                        <button class="btn btn-outline-primary mx-auto" @onclick="PerformTurn">
                            @if (currentTurn.Count > 0)
                            {
                                <span>Perform Turn</span>
                            }
                            else
                            {
                                <span>Pick Card(s)</span>
                            }
                        </button>
                    </div>
                }
                else
                {
                    <CardTable />
                }
            </div>
            <div class="col-4">
                <div class="mb-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-info">
                            <i class="bi bi-info-circle me-2"></i>
                            <span><strong>Room Details</strong></span>
                        </div>
                        <button class="btn" @onclick="() => viewDetails = !viewDetails">
                            @if (viewDetails)
                            {
                                <i class="bi bi-chevron-up"></i>
                            }
                            else
                            {
                                <i class="bi bi-chevron-down"></i>
                            }
                        </button>
                    </div>
                    @if (viewDetails)
                    {
                        <p>Room ID: <br> @currentRoom.InviteLink</p>
                        <p>Created at: <br> @currentRoom.CreatedAt</p>
                        <p>Creator: <br> @currentRoom.Creator.Email</p>
                        <p>Players: <br> @currentRoom.Game.Players.Count</p>
                        <p>Started: <br> @currentRoom.Game.IsStarted</p>

                        <div id="join-room" class="row g-2">
                            @if (currentRoom.Creator.Email == Me.Email)
                            {
                                <div class="col">
                                    <button class="btn btn-outline-success w-100 @(currentRoom.Game.IsStarted ? "disabled" : "")"
                            @onclick="StartGame">Start Game</button>
                                </div>
                            }
                            <div class="col">
                                <button class="btn btn-outline-danger w-100" @onclick="LeaveRoom">Leave Room</button>
                            </div>
                        </div>
                    }
                </div>

                <div class="form-floating mb-2">
                    <textarea class="form-control" placeholder="Type your message here" id="textInput" style="height: 100px"
                    @bind="textInput"></textarea>
                    <label for="textInput">Message</label>
                </div>
                <button class="btn btn-outline-primary w-100" @onclick="Send">Send</button>

                <hr>

                <ul id="messagesList" class="list-group list-group-flush">
                    @foreach (var message in currentRoom.Chats)
                    {
                        <li class="list-group-item">
                            <div class="fw-bold">
                                @if (message.Sender.Email == Me.Email)
                                {
                                    <i class="bi bi-person-fill me-2"></i>
                                }
                                @message.Sender
                            </div>
                            <div class="small text-muted">@message.Sent</div>
                            @message.Text
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    public CookieService CookieService { get; set; }
    private HubConnection hubConnection;
    private HubConnection requestConnection;
    [CascadingParameter]
    private IModalService ModalService { get; set; }
    private string username;

    // Join screen state
    private string inviteLink;
    private string invitePassword;
    private string createPassword;

    // UI state
    private string textInput;
    private bool viewDetails = true;
    private Guid? lastCardIdentifier = null;

    // Game state
    private Room currentRoom = null;
    private List<Card> currentTurn = new();
    private List<Card> currentHand
    {
        get
        {
            var handCopy = new List<Card>(Me.Hand);
            handCopy.RemoveAll(card => currentTurn.Contains(card));
            return handCopy;
        }
    }

    private ApplicationUser Me => currentRoom.Game.Players.Single(u => u.Email == username);

    protected override async Task OnInitializedAsync()
    {
        // Get username from AuthenticationStateProvider
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;

        // Set up SignalR with Cookie auth
        var container = new CookieContainer();
        container.Add(new Cookie
        {
            Name = ".AspNetCore.Identity.Application",
            Domain = "localhost",
            Value = CookieService.Cookie
        });

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/game"), options =>
        {
            options.Cookies = container;
        })
        .Build();

        requestConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/request"), options =>
        {
            options.Cookies = container;
        })
        .Build();

        hubConnection.On<uint>("AddCardsToDeck", num =>
        {
            for (int i = 0; i < num; i++)
                currentRoom.Game.Deck.Push(Ace.Of(Spades));
            StateHasChanged();
        });

        hubConnection.On<Card>("AddCardToHand", card =>
        {
            currentRoom.Game.Players.Single(u => u.Email == username).Hand.Add(card);
            StateHasChanged();
        });

        hubConnection.On<Card>("AddCardToPile", card =>
        {
            currentRoom.Game.Pile.Push(card);
            StateHasChanged();
        });

        hubConnection.On<List<Card>>("AddCardRangeToHand", cards =>
        {
            currentRoom.Game.Players.Single(u => u.Email == username).Hand.AddRange(cards);
            StateHasChanged();
        });

        hubConnection.On<List<Card>>("AddCardRangeToPile", cards =>
        {
            foreach (var card in cards)
                currentRoom.Game.Pile.Push(card);
            StateHasChanged();
        });

        hubConnection.On<ApplicationUser>("AddPlayerToRoom", player =>
        {
            currentRoom.Game.Players.Add(player);
            ShowToast($"{player.Email} has joined the room", ToastLevel.Info);
            StateHasChanged();
        });

        hubConnection.On<Room>("AddToRoom", room =>
        {
            currentRoom = room;
            StateHasChanged();
        });

        hubConnection.On("EmptyHand", () =>
        {
            currentRoom.Game.Players.Single(u => u.Email == username).Hand.Clear();
            StateHasChanged();
        });

        hubConnection.On<ApplicationUser>("EndGame", async winner =>
        {
            var winnerText = winner is null ? "no" : $"{winner} as the";
            ShowToast($"The game ended with {winnerText} winner.", ToastLevel.Info);
            await Task.Delay(TimeSpan.FromSeconds(3));
            currentRoom = null;
            StateHasChanged();
        });

        hubConnection.On<bool>("NotifyTurnProcessed", valid =>
        {
            if (valid) Me.Hand.RemoveAll(card => currentTurn.Contains(card));
            lastCardIdentifier = null;
            currentTurn.Clear();
            StateHasChanged();
        });

        hubConnection.On<Guid, bool>("PromptCardRequest", async (identifier, specific) =>
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(CardRequestModal.Specific), specific);
            var result = await ModalService.Show<CardRequestModal>("Request a card", parameters).Result;
            await requestConnection.SendAsync("RequestCard", identifier, (Card)result.Data);
        });

        hubConnection.On<Guid>("PromptLastCardRequest", identifier =>
        {
            lastCardIdentifier = identifier;
            StateHasChanged();
        });

        hubConnection.On<Chat>("ReceiveChat", message =>
        {
            currentRoom.Chats.Add(message);
            StateHasChanged();
        });

        hubConnection.On<SystemMessage>("ReceiveSystemMessage", message =>
        {
            var level = message.Type switch
            {
                MessageType.Error => ToastLevel.Error,
                MessageType.Info => ToastLevel.Info,
                MessageType.Success => ToastLevel.Success,
                MessageType.Warning => ToastLevel.Warning,
                _ => throw new ArgumentException("Invalid message type.", nameof(MessageType))
            };
            ShowToast(message.Text, level);
        });

        hubConnection.On("ReclaimPile", () =>
        {
            _ = currentRoom.Game.Pile.Reclaim();
            StateHasChanged();
        });

        hubConnection.On<uint>("RemoveCardsFromDeck", num =>
        {
            _ = currentRoom.Game.Deck.DealMany(num);
            StateHasChanged();
        });

        hubConnection.On("RemoveFromRoom", () =>
        {
            currentRoom = null;
            StateHasChanged();
        });

        hubConnection.On<ApplicationUser>("RemovePlayerFromRoom", player =>
        {
            _ = currentRoom.Game.Players.Remove(player);
            ShowToast($"{player.Email} has left the room", ToastLevel.Info);
            StateHasChanged();
        });

        hubConnection.On<Card>("SetCurrentRequest", request =>
        {
            currentRoom.Game.CurrentRequest = request;
            StateHasChanged();
        });

        hubConnection.On<int>("UpdateTurn", turn =>
        {
            currentRoom.Game.CurrentTurn = turn;
            StateHasChanged();
        });

        hubConnection.On<bool>("UpdateGameStatus", started =>
        {
            currentRoom.Game.IsStarted = started;
            if (started)
                ShowToast("The game has started. No new players may join.", ToastLevel.Info);
                
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await requestConnection.StartAsync();
    }

    async Task Send()
    {
        if (string.IsNullOrWhiteSpace(textInput))
        {
            ShowToast("Message field cannot be empty.", ToastLevel.Error);
            return;
        }

        await hubConnection.SendAsync("SendChat", currentRoom.InviteLink, textInput);
        textInput = string.Empty;
    }

    async Task CreateRoom() => await hubConnection.SendAsync("CreateRoom", createPassword);

    async Task JoinRoom()
    {
        if (string.IsNullOrWhiteSpace(inviteLink))
        {
            ShowToast("Invite link cannot be empty.", ToastLevel.Info);
            return;
        }
        await hubConnection.SendAsync("JoinRoom", inviteLink, invitePassword);
    }

    async Task LeaveRoom() => await hubConnection.SendAsync("LeaveRoom", currentRoom.InviteLink);

    async Task StartGame() => await hubConnection.SendAsync("StartGame", currentRoom.InviteLink);

    async Task PerformTurn()
    {
        await hubConnection.SendAsync("PerformTurn", currentRoom.InviteLink, currentTurn);
        StateHasChanged();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private async Task SendLastCardStatus(bool isLastCard)
    {
        await requestConnection.SendAsync("SetLastCardStatus", lastCardIdentifier, isLastCard);
    }

    private void ShowToast(string message, ToastLevel level)
    {
        ToastService.ShowToast(level, message);
    }

    public async ValueTask DisposeAsync() 
    {
        await hubConnection.DisposeAsync();
        await requestConnection.DisposeAsync();
    }

    private string GetCardIcon(Card card) => "bi " + card.Suit switch
    {
        Spades => "bi-suit-spade-fill",
        Hearts => "bi-suit-heart-fill text-danger",
        Clubs => "bi-suit-club-fill",
        Diamonds => "bi-suit-diamond-fill text-danger",
        BlackJoker => "bi-circle-fill",
        RedJoker => "bi-circle-fill text-danger",
        _ => string.Empty
    };

    private void AddCardToTurn(Card card)
    {
        currentTurn.Add(card);
        StateHasChanged();
    }

    private void RemoveCardFromTurn(Card card)
    {
        currentTurn.Remove(card);
        StateHasChanged();
    }
}