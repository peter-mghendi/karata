@page "/play"
@attribute [Authorize]

@using System.Net
@using System.Text.Json.Serialization
@using Karata.Web.Services
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Immutable

@implements IAsyncDisposable

@inject AuthenticationStateProvider Authenticator
@inject NavigationManager Navigator
@inject IConfiguration Config
@inject ISnackbar Snackbar

@if (_hubConnection.State != HubConnectionState.Connected)
{
    <MudText Typo="Typo.h5" Class="pa-4 my-4">You are not connected to a server.</MudText>
    <MudText Typo="Typo.h6" Class="pa-4 mb-4">If this message persists, reload this page to establish a connection.</MudText>
}
else if (_room is null)
{
    <div class="mud-height-full">
        <JoinUI OnJoin="JoinRoom" OnCreate="CreateRoom"/>
        
        @if (_gameOverInfo is not null)
        {
            <MudPaper Class="absolute mud-width-full mud-height-full pa-4 d-flex flex-column flex-grow-1 " Style="left: 0; top: 0; z-index: 1300;">
                <div class="d-flex flex-grow-0 align-center">
                    <MudSpacer></MudSpacer>
                    <MudIconButton Icon="@Icons.Rounded.Close" OnClick="@(() => _gameOverInfo = null)"></MudIconButton>
                </div>
                <MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex flex-column flex-grow-1 justify-center align-center mb-8">
                    <MudText Typo="Typo.h3" Class="mb-4">Game Over!</MudText>
                    <MudText Typo="Typo.h5">@_gameOverInfo.Reason</MudText>
                </MudContainer>
            </MudPaper>
        }
    </div>
}
else
{
    <MudDrawerContainer Class="mud-height-full">
        <MudDrawer @bind-Open="_open" Height="100%" Elevation="1" Variant="@DrawerVariant.Temporary" Anchor="Anchor.Bottom" Class="grey lighten-4">
            <MudDrawerHeader Class="d-flex justify-space-between align-center pa-2">
                <MudText Typo="Typo.h6" Class="px-4">Game Info</MudText>
                <MudIconButton Icon="@Icons.Rounded.Close" Color="Color.Inherit" OnClick="() => _open = false"/>
            </MudDrawerHeader>
            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudPaper Class="pa-4 mb-4" Elevation="0">
                    <div class="mb-2">
                        <MudSwitch @bind-Checked="_useCardTable" Color="Color.Primary" Label="Use Card Table interface (Experimental)"/>
                    </div>
                    <MudText Typo="Typo.caption" Class="text-grey">
                        The Card Table interface is still under development and, as such, may contain bugs. Use the Card List interface for best experience.
                    </MudText>
                </MudPaper>

                <DetailsUI Room="_room" Player="Player" OnSend="Send"/>
            </MudContainer>
        </MudDrawer>
        <MudPaper Elevation="0" Class="my-4">
            <MudToolBar>
                @if (@Game.IsStarted)
                {
                    <MudTooltip Text="Pick card(s)">
                        <MudIconButton Icon="@Icons.Rounded.ArrowCircleUp" Color="Color.Inherit" OnClick="() => PerformTurn(new())"/>
                    </MudTooltip>
                    <MudTooltip Text="Play card(s)">
                        <MudIconButton Icon="@Icons.Rounded.ArrowCircleDown" Color="Color.Inherit" OnClick="() => PerformTurn(_currentTurn)"/>
                    </MudTooltip>
                }

                <MudSpacer/>

                @if (!@Game.IsStarted)
                {
                    <MudTooltip Text="Start Game">
                        <MudIconButton Icon="@Icons.Rounded.PlayArrow" Color="Color.Inherit" OnClick="StartGame"/>
                    </MudTooltip>
                }

                <MudTooltip Text="Leave Room">
                    <MudIconButton Icon="@Icons.Rounded.PersonRemove" Color="Color.Inherit" OnClick="() => LeaveRoom()"/>
                </MudTooltip>
                <MudTooltip Text="Game Details">
                    <MudIconButton Icon="@Icons.Rounded.Info" Color="Color.Inherit" OnClick="() => _open = true"/>
                </MudTooltip>
            </MudToolBar>
        </MudPaper>
        @if (@Game.IsStarted)
        {
            if (_useCardTable)
            {
                <CardTableGameInterface Game="Game" Hand="Hand" Turn="_currentTurn.ToImmutableList()" OnAddCardToTurn="AddCardToTurn" OnReorderCardInTurn="ReorderCardInTurn" OnRemoveCardFromTurn="RemoveCardFromTurn"/>
            }
            else
            {
                <CardListGameInterface Game="Game" Hand="Hand" Turn="_currentTurn.ToImmutableList()" OnAddCardToTurn="AddCardToTurn" OnReorderCardInTurn="ReorderCardInTurn" OnRemoveCardFromTurn="RemoveCardFromTurn"/>
            }
        }
        else
        {
            <MudText Typo="Typo.h5" Class="pa-4 mb-4">Waiting for players to join. (@Game.Hands.Count/4)</MudText>
        }
    </MudDrawerContainer>
}

@code {

    [Inject]
    public CookieService CookieService { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    private GameOverInfo _gameOverInfo;
    private HubConnection _hubConnection;
    private string _username;
    private UIRoom _room;
    private UIGame Game => _room.Game;
    private UIHand Hand => Game.Hands.Single(h => h.User!.Email == _username);
    private UIUser Player => Hand.User;
    private readonly List<Card> _currentTurn = new();
    private bool _useCardTable;
    bool _open;

    protected override async Task OnInitializedAsync()
    {
    // Get username from AuthenticationStateProvider
        var authState = await Authenticator.GetAuthenticationStateAsync();
        _username = authState.User.Identity!.Name;

    // Set up SignalR with Cookie auth
        var container = new CookieContainer();
        container.Add(new Cookie
        {
            Name = ".AspNetCore.Identity.Application",
            Domain = Config["CookieDomain"],
            Value = CookieService.Cookie!
        });

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigator.ToAbsoluteUri("/game"), opts => opts.Cookies = container)
            .AddJsonProtocol(opts => { opts.PayloadSerializerOptions.ReferenceHandler = ReferenceHandler.Preserve; })
            .Build();

        _hubConnection.On<UIHand, int>("AddCardsToPlayerHand", (hand, num) =>
        {
            var playerHand = Game.Hands.Single(h => h.User!.Email == hand.User!.Email);
            for (var i = 0; i < num; i++) playerHand.Cards.Add(new Card());
            StateHasChanged();
        });

        _hubConnection.On<List<Card>>("AddCardRangeToHand", cards =>
        {
            Hand.Cards.AddRange(cards);
            StateHasChanged();
        });

        _hubConnection.On<List<Card>>("AddCardRangeToPile", cards =>
        {
            foreach (var card in cards) Game.Pile.Push(card);
            StateHasChanged();
        });

        _hubConnection.On<UIHand>("AddHandToRoom", hand =>
        {
            Game.Hands.Add(hand);
            Snackbar.Add($"{hand.User!.Email} has joined the room", Severity.Info);
            StateHasChanged();
        });

        _hubConnection.On<UIRoom>("AddToRoom", room =>
        {
            _room = room;
            StateHasChanged();
        });

        _hubConnection.On<string, UIUser>("EndGame", async (reason, winner) =>
        {
            _gameOverInfo = new GameOverInfo(Reason: reason, Winner: winner);

            if (_gameOverInfo.Winner is not null && _gameOverInfo.Winner.Email == _username)
            {
                // TODO: Do something special for the winner (confetti?)
                Snackbar.Add("You won!", Severity.Success);
            }

            await LeaveRoom(isEnding: true);
            StateHasChanged();
        });

        _hubConnection.On("NotifyTurnProcessed", () =>
        {
            _currentTurn.Clear();
            StateHasChanged();
        });

        _hubConnection.On<bool>("PromptCardRequest", async specific =>
        {
            var parameters = new DialogParameters {{nameof(CardRequestModal.Specific), specific}};
            var dialog = DialogService.Show<CardRequestModal>("Request a card", parameters);
            var result = await dialog.Result;
            var data = result.Cancelled ? null : (Card) result.Data;
            await _hubConnection.SendAsync("RequestCard", data);
        });

        _hubConnection.On("PromptLastCardRequest", async () =>
        {
            var dialog = DialogService.ShowMessageBox("Last Card?", "Are you on your last card?", "Yes!", "No");
            var result = await dialog ?? false;
            await _hubConnection.SendAsync("SetLastCardStatus", result);
        });

        _hubConnection.On<UIChat>("ReceiveChat", message =>
        {
            _room.Chats.Add(message);
            var sender = message.Sender.Email;
            if (sender != _username) Snackbar.Add($"New message from {sender}.", Severity.Info);
            StateHasChanged();
        });

        _hubConnection.On<SystemMessage>("ReceiveSystemMessage", message =>
        {
            var severity = message.Type switch
            {
                MessageType.Error => Severity.Error,
                MessageType.Info => Severity.Info,
                MessageType.Success => Severity.Success,
                MessageType.Warning => Severity.Warning,
                _ => throw new ArgumentException("Invalid message type.", nameof(MessageType))
                };
            Snackbar.Add(message.Text, severity);
        });

        _hubConnection.On("ReclaimPile", () =>
        {
            var cards = Game.Pile.Reclaim();
            Game.DeckCount += cards.Count;
            StateHasChanged();
        });

        _hubConnection.On<int>("RemoveCardsFromDeck", num =>
        {
            Game.DeckCount -= num;
            StateHasChanged();
        });

        _hubConnection.On<UIHand, int>("RemoveCardsFromPlayerHand", (hand, num) =>
        {
            var playerHand = Game.Hands.Single(h => h.User!.Email == hand.User!.Email);
            for (int i = 0; i < num; i++) playerHand.Cards.RemoveAt(0);
            StateHasChanged();
        });

        _hubConnection.On<List<Card>>("RemoveCardRangeFromHand", cards =>
        {
            Hand.Cards.RemoveAll(cards.Contains);
            StateHasChanged();
        });

        _hubConnection.On("RemoveFromRoom", () =>
        {
            _room = null;
            StateHasChanged();
        });

        _hubConnection.On<UIHand>("RemoveHandFromRoom", hand =>
        {
            _ = Game.Hands.RemoveAll(h => h.User!.Email == hand.User!.Email);
            Snackbar.Add($"{hand.User!.Email} has left the room.", Severity.Info);
            StateHasChanged();
        });

        _hubConnection.On<Card>("SetCurrentRequest", request =>
        {
            Game.CurrentRequest = request;
            StateHasChanged();
        });

        _hubConnection.On<int>("UpdateTurn", turn =>
        {
            Game.CurrentTurn = turn;
            var current = Game.Hands[turn].User!.Email;
            var turnText = current == _username ? "your" : $"{current}'s";
            var message = $"It is now {turnText} turn.";
            Snackbar.Add(message, Severity.Info);
            StateHasChanged();
        });

        _hubConnection.On<bool>("UpdateGameStatus", started =>
        {
            Game.IsStarted = started;
            if (started) Snackbar.Add($"The game has started", Severity.Info);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    async Task Send(string message) =>
        await _hubConnection.SendAsync("SendChat", _room.InviteLink, message);

    async Task CreateRoom(string password) => await _hubConnection.SendAsync("CreateRoom", password);

    async Task JoinRoom((string InviteLink, string Password) room) =>
        await _hubConnection.SendAsync("JoinRoom", room.InviteLink, room.Password);

    async Task LeaveRoom(bool isEnding = false) => await _hubConnection.SendAsync("LeaveRoom", _room.InviteLink, isEnding);

    async Task StartGame() => await _hubConnection.SendAsync("StartGame", _room.InviteLink);

    private void AddCardToTurn((Card Card, int Index) info)
    {
        var (card, index) = info;
        _currentTurn.Insert(index, card);
        StateHasChanged();
    }

    private void ReorderCardInTurn((Card Card, int Index) info)
    {
        var (card, index) = info;
        _currentTurn.Remove(card);
        _currentTurn.Insert(index, card);
        StateHasChanged();
    }

    private void RemoveCardFromTurn(Card card)
    {
        _currentTurn.Remove(card);
        StateHasChanged();
    }

    async Task PerformTurn(List<Card> cards)
    {
        await _hubConnection.SendAsync("PerformTurn", _room.InviteLink, cards);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync() => await _hubConnection.DisposeAsync();
}