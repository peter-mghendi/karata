@page "/play"
@attribute [Authorize]

@using System.Net
@using System.Text.Json.Serialization
@using Karata.Web.Services
@using Microsoft.AspNetCore.SignalR.Client

@implements IAsyncDisposable

@inject AuthenticationStateProvider Authenticator
@inject NavigationManager Navigator
@inject IToastService Toast

@if (hubConnection.State != HubConnectionState.Connected)
{
    <p class="lead">You are not connected to a server</p>
    <p class="text-muted">If this message persists, reload this page to establish a connection.</p>
}
else if (room is null)
{
    <JoinUI OnJoin="JoinRoom" OnCreate="CreateRoom" />
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-8">
                @if (@Game.IsStarted)
                {
                    if(useExperimentalUI)
                    {
                        <CardTable Game="Game" Hand="Hand" @ref="cardTable" OnPerformTurn="PerformTurn" />
                    }
                    else
                    {
                        <GameUI Game="Game" Hand="Hand" @ref="gameUI" OnPerformTurn="PerformTurn" />
                    }  
                }
                else
                {
                    <h4>Waiting for players to join. (@Game.Hands.Count/4)</h4>
                }
            </div>
            <div class="col-4" style="height: calc(100vh - 5rem); overflow-y: auto;">
                <div class="form-check mb-2">
                    <input class="form-check-input" type="checkbox" id="useExperimentalUI" @bind="useExperimentalUI" />
                    <label class="form-check-label" for="useExperimentalUI">Use Experimental UI</label>
                    <small class="form-text text-muted">Experimental UI is not fully implemented yet. It is still in development.</small>
                </div>
                <DetailsUI Room="room" Player="Player" OnSend="Send" OnStartGame="StartGame" OnLeaveRoom="LeaveRoom" />
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    public CookieService CookieService { get; set; }
    [CascadingParameter]
    private IModalService ModalService { get; set; }
    private HubConnection hubConnection;
    private string username;
    private IGameInterface cardTable;
    private IGameInterface gameUI;
    private UIRoom room = null;
    private UIGame Game => room.Game;
    private UIHand Hand => Game.Hands.Single(h => h.User.Email == username);
    private UIUser Player => Hand.User;
    private bool useExperimentalUI = false;

    protected override async Task OnInitializedAsync()
    {
        // Get username from AuthenticationStateProvider
        var authState = await Authenticator.GetAuthenticationStateAsync();
        username = authState.User.Identity.Name;

        // Set up SignalR with Cookie auth
        var container = new CookieContainer();
        container.Add(new Cookie
        {
            Name = ".AspNetCore.Identity.Application",
            Domain = "localhost",
            Value = CookieService.Cookie
        });

        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigator.ToAbsoluteUri("/game"), opts => opts.Cookies = container)
        .AddJsonProtocol(opts =>
        {
            opts.PayloadSerializerOptions.ReferenceHandler = ReferenceHandler.Preserve;
        })
        .Build();

        hubConnection.On<int>("AddCardsToDeck", num =>
        {
            Game.DeckCount += num;
            StateHasChanged();
        });

        hubConnection.On<Card>("AddCardToPile", card =>
        {
            Game.Pile.Push(card);
            StateHasChanged();
        });

        hubConnection.On<UIHand, int>("AddCardsToPlayerHand", (hand, num) =>
        {
            var playerHand = Game.Hands.Single(h => h.User.Email == hand.User.Email);
            for (int i = 0; i < num; i++) playerHand.Cards.Add(new());
            StateHasChanged();
        });

        hubConnection.On<List<Card>>("AddCardRangeToHand", cards =>
        {
            Hand.Cards.AddRange(cards);
            StateHasChanged();
        });

        hubConnection.On<List<Card>>("AddCardRangeToPile", cards =>
        {
            foreach (var card in cards) Game.Pile.Push(card);
            StateHasChanged();
        });

        hubConnection.On<UIHand>("AddHandToRoom", hand =>
        {
            Game.Hands.Add(hand);
            Toast.ShowInfo($"{hand.User.Email} has joined the room");
            StateHasChanged();
        });

        hubConnection.On<UIRoom>("AddToRoom", room =>
        {
            this.room = room;
            StateHasChanged();
        });

        hubConnection.On<UIUser>("EndGame", winner =>
        {            
            Toast.ShowInfo($"Game over! {(winner?.Email ?? "Nobody")} won this game.");
            room = null;
            StateHasChanged();
        });

        hubConnection.On("NotifyTurnProcessed", () =>
        {
            cardTable.NotifyTurnPerformed();
            gameUI.NotifyTurnPerformed();
        });

        hubConnection.On<bool>("PromptCardRequest", async specific =>
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(CardRequestModal.Specific), specific);
            var options = new ModalOptions { DisableBackgroundCancel = true };
            var modal = ModalService.Show<CardRequestModal>("Request a card", parameters, options);
            var result = await modal.Result;
            await hubConnection.SendAsync("RequestCard", (Card)result.Data);
        });

        hubConnection.On("PromptLastCardRequest", async () =>
        {
            var options = new ModalOptions { 
                DisableBackgroundCancel = true, 
                HideCloseButton = true
            };
            var modal = ModalService.Show<LastCardPromptModal>("Last card?", options);
            var result = await modal.Result;
            await hubConnection.SendAsync("SetLastCardStatus", (bool)result.Data);
        });

        hubConnection.On<UIChat>("ReceiveChat", message =>
        {
            room.Chats.Add(message);
            StateHasChanged();
        });

        hubConnection.On<SystemMessage>("ReceiveSystemMessage", message =>
        {
            var level = message.Type switch
            {
                MessageType.Error => ToastLevel.Error,
                MessageType.Info => ToastLevel.Info,
                MessageType.Success => ToastLevel.Success,
                MessageType.Warning => ToastLevel.Warning,
                _ => throw new ArgumentException("Invalid message type.", nameof(MessageType))
            };
            Toast.ShowToast(level, message.Text);
        });

        hubConnection.On("ReclaimPile", () =>
        {
            _ = Game.Pile.Reclaim();
            StateHasChanged();
        });

        hubConnection.On<int>("RemoveCardsFromDeck", num =>
        {
            Game.DeckCount -= num;
            StateHasChanged();
        });

        hubConnection.On<UIHand, int>("RemoveCardsFromPlayerHand", (hand, num) =>
        {
            var playerHand = Game.Hands.Single(h => h.User.Email == hand.User.Email);
            for (int i = 0; i < num; i++) playerHand.Cards.RemoveAt(0);
            StateHasChanged();
        });

        hubConnection.On<List<Card>>("RemoveCardRangeFromHand", cards =>
        {
            Hand.Cards.RemoveAll(c => cards.Contains(c));
            StateHasChanged();
        });

        hubConnection.On("RemoveFromRoom", () =>
        {
            room = null;
            StateHasChanged();
        });

        hubConnection.On<UIHand>("RemoveHandFromRoom", hand =>
        {
            _ = Game.Hands.Remove(hand);
            Toast.ShowInfo($"{hand.User.Email} has left the room.");
            StateHasChanged();
        });

        hubConnection.On<Card>("SetCurrentRequest", request =>
        {
            Game.CurrentRequest = request;
            StateHasChanged();
        });

        hubConnection.On<int>("UpdateTurn", turn =>
        {
            Game.CurrentTurn = turn;
            StateHasChanged();
        });

        hubConnection.On<bool>("UpdateGameStatus", started =>
        {
            Game.IsStarted = started;
            if (started) Toast.ShowInfo("The game has started.");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send(string message) =>
        await hubConnection.SendAsync("SendChat", room.InviteLink, message);

    async Task CreateRoom(string password) => await hubConnection.SendAsync("CreateRoom", password);

    async Task JoinRoom((string InviteLink, string Password) room) => 
        await hubConnection.SendAsync("JoinRoom", room.InviteLink, room.Password);

    async Task LeaveRoom() => await hubConnection.SendAsync("LeaveRoom", room.InviteLink);

    async Task StartGame() => await hubConnection.SendAsync("StartGame", room.InviteLink);

    async Task PerformTurn(List<Card> cards)
    {
        await hubConnection.SendAsync("PerformTurn", room.InviteLink, cards);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync() => await hubConnection.DisposeAsync();
}