@using System.Net
@using Microsoft.AspNetCore.SignalR.Client
@using Karata.Web.Models
@using Karata.Web.Services

@page "/play"
@attribute [Authorize]

@implements IAsyncDisposable

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@if (!IsConnected)
{
    <p class="lead">You are not connected to a server</p>
    <p class="text-muted">If this message persists, reload this page to establish a connection.</p>
}
else if (currentRoom is null)
{
    <p class="lead">Join or create a game room to play.</p>

    <div class="my-2">
        <label for="join-room">Join a Room</label>
        <div id="join-room" class="row g-2">
            <div class="col-12 col-md-6">
                <div class="form-floating">
                    <input type="text" class="form-control" id="inviteLink"
                    placeholder="00000000-0000-â€‹0000-0000-000000000000" @bind="inviteLink">
                    <label for="inviteLink">Invite Link</label>
                </div>
            </div>
            <div class="col-12 col-md-6">
                <div class="form-floating">
                    <input type="text" class="form-control" id="invitePassword" placeholder="password"
                    @bind="invitePassword">
                    <label for="invitePassword">Password (If Applicable)</label>
                </div>
            </div>
            <div class="col-12">
                <div class="d-flex my-auto">
                    <button class="btn btn-outline-primary align-middle w-100" @onclick="JoinRoom">
                        Join Room
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="my-2">
        <label for="create-room">Create a Room</label>
        <div id="create-room" class="row g-2">
            <div class="col">
                <div class="form-floating">
                    <input type="text" class="form-control" id="createPassword" placeholder="password"
                    @bind="createPassword">
                    <label for="createPassword">Password (Optional)</label>
                </div>
            </div>
            <div class="col-12">
                <div class="d-flex my-auto">
                    <button class="btn btn-outline-primary align-middle w-100" @onclick="CreateRoom">
                        Create Room
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-8">
                <p>Current Turn: @currentRoom.Game.Players[currentRoom.Game.CurrentTurn].Username</p>
                <p>Deck Size: @currentRoom.Game.Deck.Cards.Count</p>
                <p>Pile Size: @currentRoom.Game.Pile.Cards.Count</p>
                <p>Top Card: @currentRoom.Game.Deck.Cards.Peek().Name</p>
                <p>My cards:</p>
                <ul>
                    <li>List</li>
                    <li>Of</li>
                    <li>Cards</li>
                </ul>
                
                <button class="btn btn-outline-primary" @onclick="PerformTurn">
                    Perform Turn
                </button>
                <ul id="turnsList">
                    @foreach (var turn in turns)
                    {
                        <li>@turn</li>
                    }
                </ul>
            </div>
            <div class="col-4">
                <div class="mb-2">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-info">
                            <i class="bi bi-info-circle me-2"></i>
                            <span><strong>Room Details</strong></span>
                        </div>
                        <button class="btn" @onclick="() => viewDetails = !viewDetails">
                            @if (viewDetails)
                            {
                                <i class="bi bi-chevron-up"></i>
                            }
                            else
                            {
                                <i class="bi bi-chevron-down"></i>
                            }
                        </button>
                    </div>
                    @if (viewDetails)
                    {
                        <p>Room ID: <br> @currentRoom.Link</p>
                        <p>Created at: <br> @currentRoom.CreatedAt</p>
                        <p>Creator: <br> @currentRoom.Creator.Username</p>
                        <p>Players: <br> @currentRoom.Game.Players.Count</p>
                        <p>Started: <br> @currentRoom.Game.Started</p>

                        <div id="join-room" class="row g-2">
                            <div class="col-12 col-md-6">
                                <button class="btn btn-outline-success w-100" @onclick="StartGame">Start Game</button>
                            </div>
                            <div class="col-12 col-md-6">
                                <button class="btn btn-outline-danger w-100" @onclick="LeaveRoom">Leave Room</button>
                            </div>
                        </div>
                    }
                </div>

                <div class="form-floating mb-2">
                    <textarea class="form-control" placeholder="Type your message here" id="textInput" style="height: 100px"
                    @bind="textInput"></textarea>
                    <label for="textInput">Message</label>
                </div>
                <button class="btn btn-outline-primary w-100" @onclick="Send">Send</button>

                <hr>

                <ul id="messagesList" class="list-group list-group-flush">
                    @foreach (var message in messages)
                    {
                        <li class="list-group-item">
                            <div class="fw-bold">@message.Sender</div>
                            <div class="small text-muted">@message.Sent</div>
                            @message.Text
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@code {
    [Inject]
    public CookieService CookieService { get; set; }
    private HubConnection hubConnection;

    // Join UI state
    private string inviteLink;
    private string invitePassword;
    private string createPassword;

    // Game UI state
    private string textInput;
    private bool viewDetails = false;

    // Game tate
    private Room currentRoom = null;
    private List<ChatMessage> messages = new(); // TODO Integrate into game model
    private List<string> turns = new(); // TODO Integrate into game model

    protected override async Task OnInitializedAsync()
    {
        var container = new CookieContainer();
        var cookie = new Cookie()
        {
            Name = ".AspNetCore.Identity.Application",
            Domain = "localhost",
            Value = CookieService.Cookie
        };

        container.Add(cookie);
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/game"), options => options.Cookies = container)
        .Build();

        hubConnection.On<ChatMessage>("ReceiveChatMessage", message =>
        {
            messages.Add(message);
            StateHasChanged();
        });

        hubConnection.On<SystemMessage>("ReceiveSystemMessage", async message => await AlertAsync(message.Text));

        hubConnection.On<Room>("AddToRoom", room =>
        {
            currentRoom = room;
            StateHasChanged();
        });

        hubConnection.On("RemoveFromRoom", () =>
        {
            currentRoom = null;
            messages.Clear();
            turns.Clear();
            StateHasChanged();
        });

        hubConnection.On<Game>("UpdateGameInfo", game =>
        {
            currentRoom.Game = game;
            StateHasChanged();
        });

        hubConnection.On<User>("TurnPerformed", player =>
        {
            turns.Add($"{player.Username} played their turn.");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        await hubConnection.SendAsync("SendChatMessage", currentRoom.Link, textInput);
        textInput = string.Empty;
    }

    async Task CreateRoom() => await hubConnection.SendAsync("CreateRoom");

    async Task JoinRoom()
    {
        if (string.IsNullOrWhiteSpace(inviteLink))
        {
            await AlertAsync("Please supply an invite link and, where applicable, a password.");
            return;
        }
        await hubConnection.SendAsync("JoinRoom", inviteLink);
    }

    async Task LeaveRoom() => await hubConnection.SendAsync("LeaveRoom", currentRoom.Link);

    async Task StartGame() => await hubConnection.SendAsync("StartGame", currentRoom.Link);

    async Task PerformTurn() => await hubConnection.SendAsync("PerformTurn", currentRoom.Link);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() => await hubConnection.DisposeAsync();

    private async Task AlertAsync(string text) => await JSRuntime.InvokeVoidAsync("alert", text);
}