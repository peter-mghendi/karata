@using System.Net
@using Microsoft.AspNetCore.SignalR.Client
@using Karata.Web.Models
@using Karata.Web.Services

@page "/play"
@attribute [Authorize]

@implements IAsyncDisposable

@inject NavigationManager NavigationManager

@if (!IsConnected)
{
    <p class="lead">You are not connected to a server</p>
    <p class="text-muted">If this message persists, reload this page to establish a connection.</p>
}
else if (currentRoom is null)
{
    <p class="lead">Connect to a room to play/chat.</p>
    <div class="form-group">
        <label for="join-room">Join a Room</label>
        <div id="join-room" class="input-group">
            <input class="form-control" @bind="inviteLink" placeholder="Invite Link" />
            <input class="form-control" @bind="invitePassword" placeholder="Password (If applicable)" />
            <div class="input-group-append">
                <button class="btn btn-outline-primary" @onclick="JoinRoom">Join Room</button>
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="create-room">Create a Room</label>
        <div id="create-room" class="input-group">
            <input class="form-control" @bind="createPassword" placeholder="Password (Optional)" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" @onclick="CreateRoom">Create Room</button>
            </div>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-8">
                <p>Current Turn: @currentRoom.Game.Players[currentRoom.Game.CurrentTurn].Username</p>
                <button class="btn btn-outline-primary" @onclick="PerformTurn">Perform Turn</button>
                <ul id="turnsList">
                    @foreach (var turn in turns)
                    {
                        <li>@turn</li>
                    }
                </ul>
            </div>
            <div class="col-4">
                <p>Connected to room: @currentRoom.Link</p>
                <p>Created at: @currentRoom.CreatedAt</p>
                <p>Creator: @currentRoom.Creator.Username</p>
                
                @* <button class="btn btn-link" @onclick="async () => await Clipboard.SetTextAsync(currentRoom.Link)">Copy</button> *@
                
                <button class="btn btn-outline-danger" @onclick="LeaveRoom">Leave Room</button>
                <p>Number of players: @currentRoom.Game.Players.Count</p>
                <div class="form-group">
                    <label for="textInput">Message:</label>
                    <textarea class="form-control" id="textInput" @bind="textInput"></textarea>
                </div>
                <button class="btn btn-outline-primary" @onclick="Send">Send</button>

                <hr>

                <ul id="messagesList">
                    @foreach (var message in messages)
                    {
                        <li>@message</li>
                    }
                </ul>
            </div>
        </div>
    </div>
}


@code {
    [Inject]
    public CookieService CookieService { get; set; }

    private HubConnection hubConnection;
    private Room currentRoom = null;

    private string inviteLink;
    private string invitePassword;
    private string createPassword;
    private string textInput;

    private List<string> messages = new();
    private List<string> turns = new();

    protected override async Task OnInitializedAsync()
    {
        var container = new CookieContainer();
        var cookie = new Cookie()
        {
            Name = ".AspNetCore.Identity.Application",
            Domain = "localhost",
            Value = CookieService.Cookie
        };

        container.Add(cookie);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/game"), options => options.Cookies = container)
            .Build();

        hubConnection.On<ChatMessage>("ReceiveChatMessage", message =>
        {
            messages.Add($"[{message.Sent}] {message.Sender} : {message.Text}");
            StateHasChanged();
        });

        hubConnection.On<SystemMessage>("ReceiveSystemMessage", message =>
        {
            messages.Add($"{message.Text}");
            StateHasChanged();
        });

        hubConnection.On<Room>("AddToRoom", room => currentRoom = room);

        hubConnection.On("RemoveFromRoom", () => {
            currentRoom = null;
            StateHasChanged();
        });

        hubConnection.On<Game>("UpdateGameInfo", game => {
            currentRoom.Game = game;
            StateHasChanged();
        });

        hubConnection.On<User>("TurnPerformed", player => {
            turns.Add($"{player.Username} played their turn.");
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send() => await hubConnection.SendAsync("SendChatMessage", currentRoom.Link, textInput);

    async Task CreateRoom() => await hubConnection.SendAsync("CreateRoom");

    async Task JoinRoom() => await hubConnection.SendAsync("JoinRoom", inviteLink);

    async Task LeaveRoom() => await hubConnection.SendAsync("LeaveRoom", currentRoom.Link);

    async Task PerformTurn() => await hubConnection.SendAsync("PerformTurn", currentRoom.Link);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() => await hubConnection.DisposeAsync();
}