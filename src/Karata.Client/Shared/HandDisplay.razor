<MudListItem Value="@Hand.Player" Icon="@ConnectionIndicator(Hand).Icon" IconColor="@ConnectionIndicator(Hand).Color">
    <ChildContent>
        @Hand.Player.Username
        @if (IsAdministrator)
        {
            <MudChip T="string" Icon="@Icons.Material.Rounded.Security" Variant="Variant.Text" Color="Color.Primary"
                     Size="Size.Small">
                Admin
            </MudChip>
        }
        @if (IsMe)
        {
            <MudChip T="string" Icon="@Icons.Material.Rounded.AccountCircle" Variant="Variant.Text" Color="Color.Info"
                     Size="Size.Small">
                You
            </MudChip>
        }
    </ChildContent>

    <NestedList>
        @if (Controls)
        {
            <MudListItem Icon="@Icons.Material.Filled.SkipNext" Value="@("Skip turn")" OnClick="VoidTurn" Disabled="!IsCurrent">
                Skip turn
            </MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.PersonOff" Value="@("Mark as Away")" OnClick="SetAway">
                Mark as Away
            </MudListItem>
        }
        <MudListItem Icon="@Icons.Material.Filled.Person" Value="@("Person")" Disabled>
            Show profile (coming soon)
        </MudListItem>
    </NestedList>
</MudListItem>

@code {
    [Parameter] public bool IsAdministrator { get; set; }

    [Parameter] public bool IsCurrent { get; set; }

    [Parameter] public bool IsMe { get; set; }
    
    [Parameter] public bool Controls { get; set; }

    [Parameter] public HandData Hand { get; set; } = null!;
    
    [Parameter] public EventCallback<string> OnSetAway { get; set; }

    [Parameter] public EventCallback<string> OnVoidTurn { get; set; }

    private static (string Icon, Color Color) ConnectionIndicator(HandData hand)
    {
        var online = (Icon: Icons.Material.Rounded.Link, Color: Color.Success);
        var offline = (Icon: Icons.Material.Rounded.LinkOff, Color: Color.Error);
        var away = (Icon: Icons.Material.Rounded.LinkOff, Color: Color.Default);

        return hand.Player switch
        {
            // Alternatively, use the SignalR Hub's ConnectionState to determine our owm connection status.
            // var user when user == Me => Hub?.State is HubConnectionState.Connected ? connected : disconnected,
            _ => hand.Status switch
            {
                HandStatus.Online => online,
                HandStatus.Offline => offline,
                HandStatus.Away => away
            }
        };
    }

    private async Task SetAway(MouseEventArgs _) => await OnSetAway.InvokeAsync(Hand.Player.Id);

    private async Task VoidTurn(MouseEventArgs _) => await OnVoidTurn.InvokeAsync(Hand.Player.Id);
}