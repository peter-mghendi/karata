@using System.Collections.Immutable
@using System.Text.Json
@using Karata.Client.Models
@using Karata.Client.Support

@implements IPlayerInterface

<div Class="pa-4 mb-4">
    <MudGrid Spacing="4" Justify="Justify.Center">
        <MudItem xs="6">
            <MudList T="string" Color="Color.Info">
                <MudListSubheader>Game Info:</MudListSubheader>
                <MudAlert Class="mb-4" Severity="@(Game.Pile.Peek().GetColor() == Red ? Severity.Error : Severity.Normal)" Icon="@GetIcon(Game.Pile.Peek())">
                    Top card: @Game.Pile.Peek().GetName()
                </MudAlert>
                @if (Game.Pick > 0)
                {
                    <MudAlert Class="mb-4" Severity="Severity.Warning" Icon="@Icons.Material.Rounded.PostAdd">
                        Cards to pick: @Game.Pick
                    </MudAlert>
                }
                @if (Game.Request is not null)
                {
                    <MudAlert Class="mb-4" Severity="@(Game.Request.GetColor() == Red ? Severity.Error : Severity.Normal)" Icon="@GetIcon(Game.Request)">
                        Current request: @(Game.Request.Face is None ? Game.Request.Suit.ToString() : Game.Request.GetName())
                    </MudAlert>
                }
                <MudAlert Severity="@Severity.Info" Icon="@Icons.Material.Rounded.Person">
                    Current player: @Game.CurrentHand.Player.Username
                    @if (Game.CurrentHand.Player == Hand.Player)
                    {
                        <MudChip Value="@("You")" Icon="@Icons.Material.Rounded.AccountCircle" Variant="Variant.Text" Color="Color.Info" Size="Size.Small">
                            You
                        </MudChip>
                    }
                </MudAlert>
            </MudList>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudList T="string" Color="Color.Info">
                <MudListSubheader>Player Hands:</MudListSubheader>
                @foreach (var hand in OtherHands)
                {
                    <MudAlert Class="mb-4" Severity="@Severity.Normal" Icon="@Icons.Material.Rounded.Person">
                        @(hand.Player.Username) has @(hand.Cards.Count) cards.
                    </MudAlert>
                }
            </MudList>
        </MudItem>
    </MudGrid>
</div>

@* TODO: What is this 88vh? *@
<MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((DropItem item, string dropzone) => item.Identifier == dropzone)" 
                  ItemDropped="ItemUpdated" Class="d-flex flex-column flex-grow-1 gap-4" Style="height: 70%;">
    <ChildContent>
        <div class="d-flex flex-wrap justify-space-between gap-4 mud-height-full">
            <MudDropZone T="DropItem" Identifier="Hand" Class="rounded pa-4 flex-grow-1 overflow-y-scroll mud-height-full" AllowReorder>
                <MudText Typo="Typo.h6" Class="mb-4">My Cards</MudText>
            </MudDropZone>
            <MudDropZone T="DropItem" Identifier="Turn" Class="rounded pa-4 flex-grow-1" AllowReorder>
                <MudText Typo="Typo.h6" Class="mb-4">Current Turn</MudText>
            </MudDropZone>
        </div>
    </ChildContent>
    <ItemRenderer>
        <MudAlert Class="mt-4" Severity="@(context.Card.GetColor() == Red ? Severity.Error : Severity.Normal)" Icon="@GetIcon(@context.Card)">
            @context.Card.GetName()
        </MudAlert>
    </ItemRenderer>
</MudDropContainer>

@code
{
    [Parameter]
    public GameData Game { get; set; } = null!;

    [Parameter]
    public HandData Hand { get; set; } = null!;

    [Parameter]
    public ImmutableList<Card> Turn { get; set; } = ImmutableList<Card>.Empty;

    [Parameter]
    public EventCallback<ValueTuple<Card, int>> OnAddCardToTurn { get; set; }

    [Parameter]
    public EventCallback<ValueTuple<Card, int>> OnReorderCardInTurn { get; set; }

    [Parameter]
    public EventCallback<Card> OnRemoveCardFromTurn { get; set; }

    private List<Card> CurrentHand => Hand.Cards.Where(c => !Turn.Contains(c)).ToList();

    private List<HandData> OtherHands => Game.Hands.Where(h => h.Player.Id != Hand.Player.Id).ToList();

    private async Task AddCardToTurn(Card card, int index) => await OnAddCardToTurn.InvokeAsync((card, index));

    private async Task ReorderCardInTurn(Card card, int index) => await OnReorderCardInTurn.InvokeAsync((card, Math.Clamp(index, 0, Turn.Count - 1)));

    private async Task RemoveCardFromTurn(Card card) => await OnRemoveCardFromTurn.InvokeAsync(card);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _items.Clear();
        _items.AddRange(CurrentHand.Select(card => new DropItem {Identifier = "Hand", Card = card}));
        _items.AddRange(Turn.Select(card => new DropItem {Identifier = "Turn", Card = card}));
    }

    private async Task ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        var zone = dropItem.DropzoneIdentifier;
        var index = dropItem.IndexInZone;
        var item = dropItem.Item;
        var card = item!.Card;

        item.Identifier = zone;

        await (zone switch
        {
            "Turn" when CurrentHand.Contains(card) => AddCardToTurn(card, index),
            "Turn" when Turn.Contains(card) => ReorderCardInTurn(card, index),
            "Hand" when Turn.Contains(card) => RemoveCardFromTurn(card),
            _ => Task.CompletedTask     
        });
    }
    
    private static string GetIcon(Card card) => card.Suit switch
    {
        Spades => CardIcons.Spade,
        Hearts => CardIcons.Heart,
        Clubs => CardIcons.Club,
        Diamonds => CardIcons.Diamond,
        BlackJoker or RedJoker => Icons.Material.Rounded.TheaterComedy,
        _ => throw new ArgumentException($"Invalid suit {card.Suit}", nameof(card))
    };

    private List<DropItem> _items = [];

    public class DropItem
    {
        public string Identifier = "Hand";
        public Card Card { get; init; } = null!;
    }
}