@inject ISnackbar Snackbar

<MudTextField T="string" Label="Your message..." Variant="Variant.Filled" @bind-Value="@_message" Lines="2" Class="mb-2"
              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Rounded.Send" AdornmentColor="Color.Primary"
              OnAdornmentClick="@Send"/>

<MudList>
    @foreach (var message in Room.Chats)
    {
        <MudListItem>
            <div class="d-flex align-center">
                <MudText>@message.Sender.Email</MudText>
                @if (message.Sender == Room.Creator)
                {
                    <MudChip Icon="@Icons.Material.Rounded.Security" Variant="Variant.Text" Color="Color.Primary"
                             Size="Size.Small">
                        Creator
                    </MudChip>
                }

                @if (message.Sender == Me)
                {
                    <MudChip Icon="@Icons.Material.Rounded.AccountCircle" Variant="Variant.Text" Color="Color.Info"
                             Size="Size.Small">
                        You
                    </MudChip>
                }
            </div>
            <MudText Typo="Typo.caption" Class="grey-text mb-2">@message.Sent</MudText>
            <MudText>@message.Text</MudText>
        </MudListItem>
    }
</MudList>

@code
{
    [Parameter] public UserData Me { get; set; } = null!;

    [Parameter] public RoomData Room { get; set; } = null!;

    [Parameter] public EventCallback<string> OnSend { get; set; }

    private string _message = null!;

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(_message))
        {
            Snackbar.Add("You must enter a message to send.", Severity.Error);
            return;
        }

        await OnSend.InvokeAsync(_message);
        _message = "";
    }
}