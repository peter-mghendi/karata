@page "/game/{id:guid}/play"

@using System.Collections.Immutable
@using Karata.Client.Infrastructure.State
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TextCopy

@attribute [Authorize]

@implements IAsyncDisposable

@inject AuthenticationStateProvider Authenticator
@inject IAccessTokenProvider Provider
@inject IDialogService DialogService
@inject ILoggerFactory LoggerFactory
@inject ISnackbar Snackbar
@inject NavigationManager Navigator
@inject RoomStoreFactory Factory

<HubConnectionGuard>
    if (_store is null)
    {
    <div class="d-flex justify-center">
        <MudText Typo="Typo.body1">Loading...</MudText>
    </div>
    }
    else
    {
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mud-height-full pa-0">
        <MudGrid Class="mud-height-full px-4 pt-4">
            <MudItem xs="12" md="8" xl="9" xxl="10">
                <MudCard Elevation="0" Class="" Style="height: 88vh">
                    @if (_store!.State.Game.Status is GameStatus.Ongoing)
                    {
                        if (_table)
                        {
                            <CardTableGameInterface Game="_store.State.Game"
                                                    Hand="_store.MyHand"
                                                    Turn="_turn.ToImmutableList()"
                                                    OnAddCardToTurn="AddCardToTurn"
                                                    OnReorderCardInTurn="ReorderCardInTurn"
                                                    OnRemoveCardFromTurn="RemoveCardFromTurn"/>
                        }
                        else
                        {
                            <CardListGameInterface Game="_store.State.Game"
                                                   Hand="_store.MyHand"
                                                   Turn="_turn.ToImmutableList()"
                                                   OnAddCardToTurn="AddCardToTurn"
                                                   OnReorderCardInTurn="ReorderCardInTurn"
                                                   OnRemoveCardFromTurn="RemoveCardFromTurn"/>
                        }
                    }
                    else
                    {
                        <div class="d-flex flex-column justify-center align-content-center pa-4 pt-8">
                            <MudText Align="Align.Center" Typo="Typo.body1" Class="mb-2">
                                You are in room @_store.State.Id
                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary" OnClick="CopyRoomId"/>
                            </MudText>
                            <MudText Align="Align.Center" Typo="Typo.body2" Class="mb-2">
                                @Navigator.Uri
                                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ContentCopy" Color="Color.Primary" OnClick="CopyRoomLink"/>
                            </MudText>
                            <MudGrid Spacing="2" Justify="Justify.Center">
                                <MudItem xs="12" sm="8" md="6" lg="4" xl="3" xxl="2">
                                    <QRCode Data="@Navigator.Uri"/>
                                </MudItem>
                            </MudGrid>
                        </div>
                    }
                </MudCard>
            </MudItem>
            <MudItem Class="mud-height-full overflow-y-scroll" xs="12" md="4" xl="3" xxl="2">
                <MudPaper Elevation="0" Class="mb-4">
                    <MudToolBar>
                        @if (_store!.State.Game.Status is GameStatus.Ongoing)
                        {
                            <MudTooltip Text="Pick card(s)">
                                <MudIconButton Icon="@Icons.Material.Rounded.ArrowCircleUp" Color="Color.Inherit" OnClick="() => PerformTurn(new List<Card>())"/>
                            </MudTooltip>
                            <MudTooltip Text="Play card(s)">
                                <MudIconButton Icon="@Icons.Material.Rounded.ArrowCircleDown" Color="Color.Inherit" OnClick="() => PerformTurn(_turn)"/>
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Text="@(IsCreator ? "Start Game" : "Only the creator can start the game.")">
                                <MudIconButton Icon="@Icons.Material.Rounded.PlayArrow" Color="Color.Inherit" OnClick="StartGame" Disabled="!IsCreator"/>
                            </MudTooltip>
                        }

                        <MudTooltip Text="Leave Room">
                            <MudIconButton Icon="@Icons.Material.Rounded.PersonRemove" Color="Color.Inherit" OnClick="() => LeaveRoom()"/>
                        </MudTooltip>
                    </MudToolBar>
                </MudPaper>

                <MudPaper Class="pa-4 mb-4" Elevation="0">
                    <div class="mb-2">
                        <MudSwitch @bind-Value="_table" Color="Color.Primary" Label="Use Card Table interface (Experimental)"/>
                    </div>
                    <MudText Typo="Typo.caption" Class="text-grey">
                        The Card Table interface is still under development and, as such, may contain bugs. Use the Card List interface for best experience.
                    </MudText>
                </MudPaper>

                <MudExpansionPanels DisableBorders="true" Elevation="0" Class="mb-4">
                    <MudExpansionPanel Text="Information">
                        <InformationPanel Room="_store!.State"/>
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Players">
                        <PlayersPanel Me="_store!.MyHand.User" Room="_store.State"/>
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Chat" MaxHeight="500">
                        <ChatPanel Room="_store!.State" Me="_store.MyHand.User" OnSend="Send"/>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
        </MudGrid>
    </MudContainer>
    }
</HubConnectionGuard>

@code
{
    [Parameter] public Guid Id { get; set; }

    [Inject] public required IClipboard Clipboard { get; set; }

    private bool _table;
    private HubConnection? _hub;
    private readonly List<Card> _turn = [];
    private bool IsCreator => _store?.MyHand.User == _store?.State.Creator;

    private RoomState? _store;

    private void OnStoreChanged(RoomData room) => StateHasChanged();

    protected override async Task OnInitializedAsync()
    {
        var auth = await Authenticator.GetAuthenticationStateAsync();
        var username = auth.User.Identity!.Name!;

        _hub = new HubConnectionBuilder()
            .WithUrl(Navigator.ToAbsoluteUri("/hubs/game"), options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var result = await Provider.RequestAccessToken();
                    result.TryGetToken(out var token);
                    return token!.Value;
                };
            })
            .WithStatefulReconnect()
            .AddJsonProtocol()
            .Build();

        _hub.On<HandData, int>("AddCardsToPlayerHand", (hand, num) => { _store!.Mutate(new RoomState.AddCardsToPlayerHand(hand, num)); });

        _hub.On<List<Card>>("AddCardRangeToHand", cards => { _store!.Mutate(new RoomState.AddCardRangeToHand(_store!.MyHand, cards)); });

        _hub.On<List<Card>>("AddCardRangeToPile", cards => _store!.Mutate(new RoomState.AddCardRangeToPile(cards)));

        _hub.On<HandData>("AddHandToRoom", hand =>
        {
            _store!.Mutate(new RoomState.AddHandToRoom(hand));
            Snackbar.Add($"{hand.User.Email} has joined the room", Severity.Info);
        });

        _hub.On<RoomData>("AddToRoom", room =>
        {
            _store = Factory.Create(room, username);
            _store.AddInterceptor(new LoggingInterceptor<RoomData>(LoggerFactory));
            _store.AddInterceptor(new TimingInterceptor<RoomData>(LoggerFactory));
            _store.Observe(OnStoreChanged);

            StateHasChanged();
        });

        _hub.On("EndGame", async () =>
        {
            await LeaveRoom();
            Navigator.NavigateTo($"/game/{_store!.State.Id.ToString()}/over");
        });

        _hub.On("NotifyTurnProcessed", () =>
        {
            _turn.Clear();
            StateHasChanged();
        });

        _hub.On<bool, Task<Card?>>("PromptCardRequest", async specific =>
        {
            var parameters = new DialogParameters { { nameof(CardRequestModal.Specific), specific } };
            var dialog = await DialogService.ShowAsync<CardRequestModal>("Request a card", parameters);
            var result = await dialog.Result;

            return result.Canceled ? null : (Card)result.Data;
        });

        _hub.On("PromptLastCardRequest", async () =>
        {
            var dialog = DialogService.ShowMessageBox("Last Card?", "Are you on your last card?", "Yes!", "No");
            return await dialog ?? false;
        });

        _hub.On<ChatData>("ReceiveChat", message =>
        {
            _store!.Mutate(new RoomState.ReceiveChat(message));

            var sender = message.Sender.Email;
            if (sender != username) Snackbar.Add($"New message from {sender}.", Severity.Info);
            StateHasChanged();
        });

        _hub.On<SystemMessage>("ReceiveSystemMessage", message =>
        {
            var severity = message.Type switch
            {
                MessageType.Error => Severity.Error,
                MessageType.Info => Severity.Info,
                MessageType.Success => Severity.Success,
                MessageType.Warning => Severity.Warning,
                _ => throw new ArgumentException("Invalid message type.", nameof(MessageType))
            };
            Snackbar.Add(message.Text, severity);
        });

        _hub.On("ReclaimPile", () => _store!.Mutate(new RoomState.ReclaimPile()));

        _hub.On<int>("RemoveCardsFromDeck", num => _store!.Mutate(new RoomState.RemoveCardsFromDeck(num)));

        _hub.On<HandData, int>("RemoveCardsFromPlayerHand", (hand, num) => { _store!.Mutate(new RoomState.RemoveCardsFromPlayerHand(hand, num)); });

        _hub.On<List<Card>>("RemoveCardRangeFromHand", cards => { _store!.Mutate(new RoomState.RemoveCardRangeFromHand(_store!.MyHand, cards)); });

        _hub.On("RemoveFromRoom", () =>
        {
            _store!.Forget(OnStoreChanged);
            _store = null;

            StateHasChanged();
        });

        _hub.On<HandData>("RemoveHandFromRoom", hand =>
        {
            _store!.Mutate(new RoomState.RemoveHandFromRoom(hand));
            Snackbar.Add($"{hand.User.Email} has left the room.", Severity.Info);
        });

        _hub.On<Card>("SetCurrentRequest", request => _store!.Mutate(new RoomState.SetCurrentRequest(request)));

        _hub.On<int>("UpdateTurn", turn =>
        {
            _store!.Mutate(new RoomState.UpdateTurn(turn));

            var current = _store!.State.Game.CurrentHand.User.Email;
            var message = $"It is now {(current == username ? "your" : $"{current}'s")} turn.";
            Snackbar.Add(message, Severity.Info);
        });

        _hub.On<GameStatus>("UpdateGameStatus", status =>
        {
            _store!.Mutate(new RoomState.UpdateGameStatus(status));

            if (status == GameStatus.Ongoing) Snackbar.Add("The game has started.", Severity.Info);
        });

        await _hub.StartAsync();
        await _hub.SendAsync("JoinRoom", Id, "");
    }

    // TODO: Move these into services then have things like <... OnSend="ChatService.Send" ... />

    async Task LeaveRoom() => await _hub!.SendAsync("LeaveRoom", _store!.State.Id);

    async Task StartGame() => await _hub!.SendAsync("StartGame", _store!.State.Id);

    private void AddCardToTurn(ValueTuple<Card, int> info)
    {
        var (card, index) = info;
        _turn.Insert(index, card);
        StateHasChanged();
    }

    private void ReorderCardInTurn(ValueTuple<Card, int> info)
    {
        var (card, index) = info;
        _turn.Remove(card);
        _turn.Insert(index, card);
        StateHasChanged();
    }

    private void RemoveCardFromTurn(Card card)
    {
        _turn.Remove(card);
        StateHasChanged();
    }

    async Task PerformTurn(List<Card> cards)
    {
        await _hub!.SendAsync("PerformTurn", _store!.State.Id, cards);
        StateHasChanged();
    }

    async Task Send(string message) => await _hub!.SendAsync("SendChat", _store!.State.Id, message);

    private async Task CopyRoomId()
    {
        await Clipboard.SetTextAsync(Id.ToString());
        Snackbar.Add("Copied to clipboard.", Severity.Info);
    }

    private async Task CopyRoomLink()
    {
        await Clipboard.SetTextAsync(Navigator.Uri);
        Snackbar.Add("Copied to clipboard.", Severity.Info);
    }

    public async ValueTask DisposeAsync()
    {
        _store?.Forget(OnStoreChanged);

        if (_hub is null) return;
        await _hub.DisposeAsync();
    }
}