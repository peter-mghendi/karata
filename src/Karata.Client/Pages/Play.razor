@page "/game/{id:guid}/play"

@using System.Collections.Immutable
@using System.Reactive.Linq
@using Karata.Pebble.Interceptors
@using Karata.Shared.State
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TextCopy

@attribute [Authorize]

@implements IAsyncDisposable

@inject AuthenticationStateProvider Authenticator
@inject IAccessTokenProvider Provider
@inject IDialogService DialogService
@inject ILoggerFactory LoggerFactory
@inject ISnackbar Snackbar
@inject NavigationManager Navigator

<HubConnectionGuard Hub="_hub">
    <MudLoading Loading="@(_store is null)" Text="Please wait..." Class="mud-height-full pa-0">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mud-height-full pa-0">
            @if (_store is not null)
            {
                <MudGrid Class="mud-height-full px-4 pt-4">
                    <MudItem xs="12" md="8" xl="9" xxl="10">
                        @* TODO: What is this 88vh? *@
                        <MudCard Elevation="0" Style="background-color: transparent; height: 88vh">
                            @if (_store!.State.Game.Status is GameStatus.Ongoing)
                            {
                                if (_table)
                                {
                                    <CardTableGameInterface Game="_store.State.Game"
                                                            Hand="MyHand"
                                                            Turn="_turn.State"
                                                            OnAddCardToTurn="info => _turn.Mutate(new TurnState.Add(info))"
                                                            OnReorderCardInTurn="info => _turn.Mutate(new TurnState.Reorder(info))"
                                                            OnRemoveCardFromTurn="card => _turn.Mutate(new TurnState.Remove(card))"/>
                                }
                                else
                                {
                                    <CardListGameInterface Game="_store.State.Game"
                                                           Hand="MyHand"
                                                           Turn="_turn.State"
                                                           OnAddCardToTurn="info => _turn.Mutate(new TurnState.Add(info))"
                                                           OnReorderCardInTurn="info => _turn.Mutate(new TurnState.Reorder(info))"
                                                           OnRemoveCardFromTurn="card => _turn.Mutate(new TurnState.Remove(card))"/>
                                }
                            }
                            else
                            {
                                <div class="d-flex flex-column justify-center align-content-center pa-4 pt-8">
                                    <MudText Align="Align.Center" Typo="Typo.h5" Class="gray-text mb-2">
                                        Waiting for players...
                                    </MudText>
                                    <MudText Align="Align.Center" Typo="Typo.h3" Class="mb-4">
                                    <span
                                        style="@(_store.State.Game.Hands.Count is < 2 or > 4 ? "color: var(--mud-palette-error)" : "color: var(--mud-palette-success)")">
                                        @_store.State.Game.Hands.Count    
                                    </span>
                                        of 4
                                    </MudText>
                                    <MudText Align="Align.Center" Typo="Typo.body2" Class="gray-text">
                                        Room ID
                                    </MudText>
                                    <MudText Align="Align.Center" Typo="Typo.body1" Class="mb-2">
                                        @_store.State.Id
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ContentCopy"
                                                       Color="Color.Primary" OnClick="CopyRoomId"/>
                                    </MudText>
                                    <MudText Align="Align.Center" Typo="Typo.body2" Class="gray-text">
                                        Room link
                                    </MudText>
                                    <MudText Align="Align.Center" Typo="Typo.body2" Class="mb-8">
                                        @Navigator.Uri
                                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.ContentCopy"
                                                       Color="Color.Primary" OnClick="CopyRoomLink"/>
                                    </MudText>
                                    <MudGrid Spacing="2" Justify="Justify.Center">
                                        <MudItem xs="12" sm="8" md="6" lg="4" xl="3" xxl="2">
                                            <QRCode Data="@Navigator.Uri"/>
                                        </MudItem>
                                    </MudGrid>
                                </div>
                            }
                        </MudCard>
                    </MudItem>
                    <MudItem Class="mud-height-full overflow-y-scroll" xs="12" md="4" xl="3" xxl="2">
                        <MudPaper Elevation="0" Class="mb-4">
                            <MudToolBar>
                                @if (_store!.State.Game.Status is GameStatus.Ongoing)
                                {
                                    <MudTooltip Text="Pick card(s)">
                                        <MudIconButton Icon="@Icons.Material.Rounded.ArrowCircleUp"
                                                       Color="Color.Inherit"
                                                       OnClick="() => PerformTurn([])"/>
                                    </MudTooltip>
                                    <MudTooltip Text="Play card(s)">
                                        <MudIconButton Icon="@Icons.Material.Rounded.ArrowCircleDown"
                                                       Color="Color.Inherit"
                                                       OnClick="() => PerformTurn([.._turn.State])"/>
                                    </MudTooltip>
                                }
                                else
                                {
                                    <MudTooltip
                                        Text="@(IsAdministrator ? "Start Game" : "Only the admin can start the game.")">
                                        <MudIconButton Icon="@Icons.Material.Rounded.PlayArrow" Color="Color.Inherit"
                                                       OnClick="StartGame" Disabled="!IsAdministrator"/>
                                    </MudTooltip>
                                }

                                <MudTooltip Text="Leave Room">
                                    <MudIconButton Icon="@Icons.Material.Rounded.PersonRemove" Color="Color.Inherit"
                                                   OnClick="() => LeaveRoom()"/>
                                </MudTooltip>
                            </MudToolBar>
                        </MudPaper>

                        <MudPaper Class="pa-4 mb-4" Elevation="0">
                            <div class="mb-2">
                                <MudSwitch @bind-Value="_table" Color="Color.Primary"
                                           Label="Table interface (Experimental)"
                                           Disabled="@(_store!.State.Game.Status is not GameStatus.Ongoing)"/>
                            </div>
                            <MudText Typo="Typo.caption" Class="text-gray">
                                The table interface is still under development and, as such, may contain bugs.
                            </MudText>
                        </MudPaper>

                        <MudPaper Class="pa-4 mb-4" Elevation="0">
                            <div class="mb-2">
                                <MudSwitch @bind-Value="_learner" Color="Color.Primary"
                                           Label="Learner mode (Experimental)"
                                           Disabled="@(_store!.State.Game.Status is not GameStatus.Ongoing)"/>
                            </div>
                            <MudText Typo="Typo.caption" Class="text-gray">Shows hints.</MudText>
                        </MudPaper>

                        <MudExpansionPanels Outlined="false" Elevation="0" Class="mb-4">
                            @if (_learner && _store!.State.Game.Status is GameStatus.Ongoing)
                            {
                                <MudExpansionPanel Text="Learner mode">
                                    <TurnEffects Game="_store!.State.Game" Cards="@( [.._turn.State])"/>
                                </MudExpansionPanel>
                            }
                            <MudExpansionPanel Text="Information">
                                <InformationPanel Room="_store!.State"/>
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="Players">
                                <PlayersPanel Me="MyHand.Player" Room="_store.State" Controls="IsAdministrator" 
                                              OnSetAway="SetAway" OnVoidTurn="VoidTurn" />
                            </MudExpansionPanel>
                            <MudExpansionPanel Text="Chat" MaxHeight="480" Class="overflow-y-auto">
                                <ChatPanel Room="_store!.State" Me="MyHand.Player" OnSend="Send"/>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                </MudGrid>
            }
        </MudContainer>
    </MudLoading>
</HubConnectionGuard>

@code
{
    [Parameter] public Guid Id { get; set; }

    [Inject] public required IClipboard Clipboard { get; set; }

    private bool _learner;
    private bool _table;
    private HubConnection? _hub;
    private RoomState? _store;
    private TurnState _turn = new([], []);
    private string? _username;

    private HandData MyHand => _store!.State.Game.Hands.Single(h => h.Player.Username == _username);
    private bool IsAdministrator => MyHand.Player == _store?.State.Administrator;

    private void OnStoreChanged<T>(T data) where T : class => StateHasChanged();

    protected override async Task OnInitializedAsync()
    {
        var auth = await Authenticator.GetAuthenticationStateAsync();
        _username = auth.User.Identity!.Name!;

        _hub = new HubConnectionBuilder()
            .WithUrl(Navigator.ToAbsoluteUri("/hubs/game/play"), options =>
            {
                options.AccessTokenProvider = async () =>
                {
                    var result = await Provider.RequestAccessToken();
                    result.TryGetToken(out var token);
                    return token!.Value;
                };
            })
            .WithStatefulReconnect()
            .AddJsonProtocol()
            .Build();

        _hub.On<UserData, HandStatus>("AddHandToRoom", (user, status) =>
        {
            _store!.Mutate(new RoomState.AddHandToRoom(user, status));
            Snackbar.Add($"{user.Username} has joined the room", Severity.Info, c => c.SnackbarVariant = Variant.Text);
        });

        _hub.On<RoomData>("AddToRoom", room =>
        {
            _store = new RoomState(room, [
                new LoggingInterceptor<RoomData>(LoggerFactory),
                new TimingInterceptor<RoomData>(LoggerFactory)
            ]);
            _turn = new TurnState([], [
                new LoggingInterceptor<ImmutableList<Card>>(LoggerFactory),
                new TimingInterceptor<ImmutableList<Card>>(LoggerFactory)
            ]);

            _store.Changes
                .Merge<object>(_turn.Changes)
                .Throttle(TimeSpan.FromMilliseconds(500))
                .Subscribe(OnStoreChanged);

            StateHasChanged();
        });

        _hub.On("EndGame", async () =>
        {
            await _hub.StopAsync();
            Navigator.NavigateTo($"/game/{_store!.State.Id.ToString()}/over");
        });

        _hub.On<UserData, int>("MoveCardCountFromDeckToHand", (user, num) => _store!.Mutate(new RoomState.MoveCardCountFromDeckToHand(user, num)));

        _hub.On<List<Card>>("MoveCardsFromDeckToHand", cards => _store!.Mutate(new RoomState.MoveCardsFromDeckToHand(MyHand.Player, cards)));

        _hub.On<List<Card>>("MoveCardsFromDeckToPile", cards => _store!.Mutate(new RoomState.MoveCardsFromDeckToPile(cards)));

        _hub.On<UserData, List<Card>>("MoveCardsFromHandToPile", (user, cards) => _store!.Mutate(new RoomState.MoveCardsFromHandToPile(user, cards, MyHand.Player == user)));

        _hub.On("NotifyTurnProcessed", () =>
        {
            _turn.Mutate(new TurnState.Clear());
            StateHasChanged();
        });

        _hub.On<bool, Card?>("PromptCardRequest", async specific =>
        {
            var parameters = new DialogParameters { { nameof(CardRequestModal.Specific), specific } };
            var dialog = await DialogService.ShowAsync<CardRequestModal>("Request a card", parameters);
            var result = await dialog.Result;

            return result?.Data as Card;
        });

        _hub.On("PromptLastCardRequest", async () =>
        {
            const string blurb = "Declare <b>last card</b> if you have a card or cards that you can legally finish the game with in the next turn.";
            var dialog = DialogService.ShowMessageBox("Last Card?", new MarkupString(blurb), "Yes!", "No");
            return await dialog ?? false;
        });


        _hub.On("PromptPasscode", async () =>
        {
            bool repeat;
            do
            {
                var dialog = await DialogService.ShowAsync<PasswordRequestModal>("Enter password");
                var result = await dialog.Result;

                if (result?.Data is string passcode) return passcode;

                var back = DialogService.ShowMessageBox("Go back?", "Exit to 'Join Game' screen?", "Exit", "Try again");
                repeat = await back is false;
            } while (repeat);

            Navigator.NavigateTo("/game/join");
            return null;
        });

        _hub.On<ChatData>("ReceiveChat", message =>
        {
            _store!.Mutate(new RoomState.ReceiveChat(message));

            if (message.Sender.Username != _username)
            {
                Snackbar.Add(
                    @<div>
                        <p class="mud-typography-body2">@message.Sender.Username:</p>
                        <p class="mud-typography-body1">@message.Text</p>
                    </div>,
                    Severity.Normal,
                    c => c.SnackbarVariant = Variant.Text
                );
            }

            StateHasChanged();
        });

        _hub.On<SystemMessage>("ReceiveSystemMessage", message =>
        {
            var severity = message.Type switch
            {
                MessageType.Error => Severity.Error,
                MessageType.Info => Severity.Info,
                MessageType.Success => Severity.Success,
                MessageType.Warning => Severity.Warning,
                _ => throw new ArgumentException("Invalid message type.", nameof(MessageType))
            };
            Snackbar.Add(message.Text, severity, c => c.SnackbarVariant = Variant.Text);
        });

        _hub.On("ReclaimPile", () => _store!.Mutate(new RoomState.ReclaimPile()));

        _hub.On("RemoveFromRoom", async () =>
        {
            var uri = $"/game/{_store!.State.Id}";

            _store!.Dispose();
            _turn.Dispose();

            StateHasChanged();

            await _hub.StopAsync();
            Navigator.NavigateTo(uri);
        });

        _hub.On<UserData>("RemoveHandFromRoom", user =>
        {
            _store!.Mutate(new RoomState.RemoveHandFromRoom(user));
            Snackbar.Add($"{user.Username} has left the room.", Severity.Info, c => c.SnackbarVariant = Variant.Text);
        });

        _hub.On<Card>("SetCurrentRequest", request => _store!.Mutate(new RoomState.SetCurrentRequest(request)));

        _hub.On<UserData>("UpdateAdministrator", administrator => _store!.Mutate(new RoomState.UpdateAdministrator(administrator)));

        _hub.On<GameStatus>("UpdateGameStatus", status =>
        {
            _store!.Mutate(new RoomState.UpdateGameStatus(status));
            Snackbar.Add($"The game is now {status.ToString().ToLower()}.", Severity.Info, c => c.SnackbarVariant = Variant.Text);
        });

        _hub.On<UserData, HandStatus>("UpdateHandStatus", (user, status) =>
        {
            _store!.Mutate(new RoomState.UpdateHandStatus(user, status));
            Snackbar.Add($"{user.Username} is now {status.ToString().ToLower()}.", Severity.Info, c => c.SnackbarVariant = Variant.Text);
        });

        _hub.On<uint>("UpdatePick", num => _store!.Mutate(new RoomState.UpdatePick(num)));

        _hub.On<int>("UpdateTurn", turn =>
        {
            _store!.Mutate(new RoomState.UpdateTurn(turn));

            var current = _store!.State.Game.CurrentHand.Player.Username;
            var possessive = current == _username ? "your" : $"{current}'s";
            Snackbar.Add($"It is now {possessive} turn.", Severity.Info, c => c.SnackbarVariant = Variant.Text);
        });

        await _hub.StartAsync();
        await _hub.SendAsync("JoinRoom", Id);
    }

    async Task LeaveRoom() => await _hub!.SendAsync("LeaveRoom", _store!.State.Id);

    async Task StartGame() => await _hub!.SendAsync("StartGame", _store!.State.Id);

    async Task PerformTurn(List<Card> cards)
    {
        await _hub!.SendAsync("PerformTurn", _store!.State.Id, cards);
        StateHasChanged();
    }

    async Task Send(string message) => await _hub!.SendAsync("SendChat", _store!.State.Id, message);
    
    async Task SetAway(string playerId) => await _hub!.SendAsync("SetAway", _store!.State.Id, playerId);

    async Task VoidTurn(string playerId) => await _hub!.SendAsync("VoidTurn", _store!.State.Id, playerId);

    private async Task CopyRoomId()
    {
        await Clipboard.SetTextAsync(Id.ToString());
        Snackbar.Add("Copied to clipboard.", Severity.Info, c => c.SnackbarVariant = Variant.Text);
    }

    private async Task CopyRoomLink()
    {
        await Clipboard.SetTextAsync(Navigator.Uri);
        Snackbar.Add("Copied to clipboard.", Severity.Info, c => c.SnackbarVariant = Variant.Text);
    }

    public async ValueTask DisposeAsync()
    {
        _store?.Dispose();
        _turn.Dispose();

        if (_hub is null) return;
        await _hub.DisposeAsync();
    }
}