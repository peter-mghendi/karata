 @page "/game/{id:guid}/play"

@attribute [Authorize]

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json.Serialization

@inject AuthenticationStateProvider Authenticator
@inject HttpClient Http
@inject IAccessTokenProvider Provider
@inject ISnackbar Snackbar
@inject NavigationManager Navigator

@if (_room is null)
{
    <div class="d-flex justify-center">
        <MudText Typo="Typo.body1">Loading...</MudText>
    </div>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mud-height-full pa-0">
        <MudGrid Class="mud-height-full px-4 pt-4">
            <MudItem xs="12" md="8" xl="9" xxl="10">
                <MudCard Elevation="0" Class="pa-4 pt-8">
                    <div class="d-flex flex-column justify-center align-content-center">
                        <MudText Align="Align.Center" Typo="Typo.body1" Class="mb-2">
                            You are in room @_room.Id
                            <MudIconButton Size="Size.Small" Icon="@Icons.Filled.ContentCopy" Color="Color.Primary" />
                        </MudText>
                        <MudText Align="Align.Center" Typo="Typo.body2" Class="mb-2">
                            @Navigator.Uri
                            <MudIconButton Size="Size.Small" Icon="@Icons.Filled.ContentCopy" Color="Color.Primary" />
                        </MudText>
                        <MudGrid Spacing="2" Justify="Justify.Center">
                            <MudItem xs="12" sm="8" md="6" lg="4" xl="3" xxl="2">
                                <QRCode Data="@Navigator.Uri" />
                            </MudItem>
                        </MudGrid>
                    </div>
                </MudCard>
            </MudItem>
            <MudItem Class="mud-height-full overflow-y-scroll" xs="12" md="4" xl="3" xxl="2">
                <MudPaper Elevation="0" Class="mb-4">
                    <MudToolBar>
                        @if (_room.Game.IsStarted)
                        {
                            <MudTooltip Text="Pick card(s)">
                                <MudIconButton Icon="@Icons.Rounded.ArrowCircleUp" Color="Color.Inherit" OnClick="() => PerformTurn(new())"/>
                            </MudTooltip>
                            <MudTooltip Text="Play card(s)">
                                <MudIconButton Icon="@Icons.Rounded.ArrowCircleDown" Color="Color.Inherit" OnClick="() => PerformTurn(_turn)"/>
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Text="@(IsCreator ? "Start Game" : "Only the creator can start the game.")">
                                <MudIconButton Icon="@Icons.Rounded.PlayArrow" Color="Color.Inherit" OnClick="StartGame" Disabled="!IsCreator"/>
                            </MudTooltip>
                        }

                        <MudTooltip Text="Leave Room">
                            <MudIconButton Icon="@Icons.Rounded.PersonRemove" Color="Color.Inherit" OnClick="() => LeaveRoom()"/>
                        </MudTooltip>
                    </MudToolBar>
                </MudPaper>

                <MudPaper Class="pa-4 mb-4" Elevation="0">
                    <div class="mb-2">
                        <MudSwitch @bind-Checked="_table" Color="Color.Primary" Label="Use Card Table interface (Experimental)"/>
                    </div>
                    <MudText Typo="Typo.caption" Class="text-grey">
                        The Card Table interface is still under development and, as such, may contain bugs. Use the Card List interface for best experience.
                    </MudText>
                </MudPaper>

                <MudExpansionPanels DisableBorders="true" Elevation="0" Class="mb-4">
                    <MudExpansionPanel Text="Information">
                    <InformationPanel Room="_room" />
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Players">
                        <PlayersPanel Room="_room" />
                    </MudExpansionPanel>
                    <MudExpansionPanel Text="Chat" MaxHeight="500">
                        <ChatPanel Room="_room" OnSend="Send"/>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }

    private bool _expand = true;
    private bool _table;
    private HubConnection? _hub;
    private UIHand? _hand;
    private UIRoom? _room;
    private readonly List<Card> _turn = new();
    private bool IsCreator => _hand?.User.Email == _room?.Creator.Email;
    protected override async Task OnInitializedAsync()
    {        
        var auth = await Authenticator.GetAuthenticationStateAsync();
        var username = auth.User.Identity!.Name!;

        _hub = new HubConnectionBuilder()
            .WithUrl(Navigator.ToAbsoluteUri("/hubs/game"), options => {
                options.AccessTokenProvider = async () =>
                {
                    var result = await Provider.RequestAccessToken();
                    result.TryGetToken(out var token);
                    return token.Value;
                };
            })
            .AddJsonProtocol()
            .Build();

        @* _hub.On<UIHand, int>("AddCardsToPlayerHand", (hand, num) =>
        {
            if (Game is null) return;
            var playerHand = Game.Hands.Single(h => h.User!.Email == hand.User!.Email);
            for (var i = 0; i < num; i++) playerHand.Cards.Add(new Card());
            StateHasChanged();
        });

        _hub.On<List<Card>>("AddCardRangeToHand", cards =>
        {
            if (Hand is null) return;
            Hand.Cards.AddRange(cards);
            StateHasChanged();
        });

        _hub.On<List<Card>>("AddCardRangeToPile", cards =>
        {
            if (Game is null) return;
            foreach (var card in cards) Game.Pile.Push(card);
            StateHasChanged();
        }); *@

        _hub.On<UIHand>("AddHandToRoom", hand =>
        {
            if (_room is null) return;
            _room.Game.Hands.Add(hand);
            Snackbar.Add($"{hand.User.Email} has joined the room", Severity.Info);
            StateHasChanged();
        });

        _hub.On<UIRoom>("AddToRoom", room =>
        {
            _room = room;
            _hand = _room.Game.Hands.Single(h => h.User.Email == username);
            StateHasChanged();
        });

        @* _hub.On<string, UIUser>("EndGame", async (reason, winner) =>
        {
            if (_room is null) return;
            _gameOverInfo = new GameOverInfo(_room.InviteLink!, reason, winner);

            if (_gameOverInfo.Winner is not null && _gameOverInfo.Winner.Email == _username)
            {
                // TODO: Do something special for the winner (confetti?)
                Snackbar.Add("You won!", Severity.Success);
            }

            await LeaveRoom(true);
            StateHasChanged();
        });

        _hub.On("NotifyTurnProcessed", () =>
        {
            _currentTurn.Clear();
            StateHasChanged();
        });

        _hub.On<bool, Task<Card?>>("PromptCardRequest", async specific =>
        {
            var parameters = new DialogParameters { { nameof(CardRequestModal.Specific), specific } };
            var dialog = DialogService.Show<CardRequestModal>("Request a card", parameters);
            var result = await dialog.Result;
            return result.Cancelled ? null : (Card)result.Data;
        });

        _hub.On<bool>("PromptLastCardRequest", async () =>
        {
            var dialog = DialogService.ShowMessageBox("Last Card?", "Are you on your last card?", "Yes!", "No");
            return (await dialog) ?? false;
        });

        _hub.On<UIChat>("ReceiveChat", message =>
        {
            if (_room is null) return;
            _room.Chats.Add(message);
            var sender = message.Sender.Email;
            if (sender != _username) Snackbar.Add($"New message from {sender}.", Severity.Info);
            StateHasChanged();
        });

        _hub.On<SystemMessage>("ReceiveSystemMessage", message =>
        {
            var severity = message.Type switch
            {
                MessageType.Error => Severity.Error,
                MessageType.Info => Severity.Info,
                MessageType.Success => Severity.Success,
                MessageType.Warning => Severity.Warning,
                _ => throw new ArgumentException("Invalid message type.", nameof(MessageType))
                };
            Snackbar.Add(message.Text, severity);
        });

        _hub.On("ReclaimPile", () =>
        {
            if (Game is null) return;
            var cards = Game.Pile.Reclaim();
            Game.DeckCount += cards.Count;
            StateHasChanged();
        });

        _hub.On<int>("RemoveCardsFromDeck", num =>
        {
            if (Game is null) return;
            Game.DeckCount -= num;
            StateHasChanged();
        });

        _hub.On<UIHand, int>("RemoveCardsFromPlayerHand", (hand, num) =>
        {
            if (Game is null) return;
            var playerHand = Game.Hands.Single(h => h.User!.Email == hand.User!.Email);
            for (var i = 0; i < num; i++) playerHand.Cards.RemoveAt(0);
            StateHasChanged();
        });

        _hub.On<List<Card>>("RemoveCardRangeFromHand", cards =>
        {
            if (Hand is null) return;
            Hand.Cards.RemoveAll(cards.Contains);
            StateHasChanged();
        });

        _hub.On("RemoveFromRoom", () =>
        {
            _room = null;
            StateHasChanged();
        });

        _hub.On<UIHand>("RemoveHandFromRoom", hand =>
        {
            if (Game is null) return;
            _ = Game.Hands.RemoveAll(h => h.User!.Email == hand.User!.Email);
            Snackbar.Add($"{hand.User!.Email} has left the room.", Severity.Info);
            StateHasChanged();
        });

        _hub.On<Card>("SetCurrentRequest", request =>
        {
            if (Game is null) return;
            Game.CurrentRequest = request;
            StateHasChanged();
        });

        _hub.On<int>("UpdateTurn", turn =>
        {
            if (Game is null) return;
            Game.CurrentTurn = turn;
            var current = Game.Hands[turn].User!.Email;
            var turnText = current == _username ? "your" : $"{current}'s";
            var message = $"It is now {turnText} turn.";
            Snackbar.Add(message, Severity.Info);
            StateHasChanged();
        });

        _hub.On<bool>("UpdateGameStatus", started =>
        {
            if (Game is null) return;
            Game.IsStarted = started;
            if (started) Snackbar.Add("The game has started", Severity.Info);
            StateHasChanged();
        }); *@

        await _hub.StartAsync();
        await _hub.SendAsync("JoinRoom", Id, "");
    }

    // TODO: Move these into services then have things like <... OnSend="ChatService.Send" ... />

    async Task LeaveRoom(bool isEnding = false)
    {
        if (_hub is null || _room is null) return;
        await _hub.SendAsync("LeaveRoom", _room.Id, isEnding);
    }

    async Task StartGame()
    {
        if (_hub is null || _room is null) return;
        await _hub.SendAsync("StartGame", _room.Id);
    }
    
    async Task PerformTurn(List<Card> cards)
    {
        if (_hub is null || _room is null) return;
        await _hub.SendAsync("PerformTurn", _room.Id, cards);
        StateHasChanged();
    }

    async Task Send(string message)
    {
        if (_hub is null || _room is null) return;
        await _hub.SendAsync("SendChat", _room.Id, message);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hub is null) return;
        await _hub.DisposeAsync();
    }
}

@*@using System.Collections.Immutable
@using System.Net
@using Microsoft.AspNetCore.SignalR.Client
@using Karata.Client.Services
@using System.Text.Json.Serialization

@implements IAsyncDisposable

@inject AuthenticationStateProvider Authenticator
@inject NavigationManager Navigator
@inject IConfiguration Config
@inject ISnackbar Snackbar

@if (_gameOverInfo is not null)
{
    <MudPaper Class="absolute mud-width-full mud-height-full pa-4 d-flex flex-column flex-grow-1" Style="left: 0; top: 0; z-index: 1300;">
        <div class="d-flex flex-grow-0 align-center">
            <MudSpacer></MudSpacer>
            <MudIconButton Icon="Icons.Rounded.Close" OnClick="() => _gameOverInfo = null"></MudIconButton>
        </div>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex flex-column flex-grow-1 justify-center align-self-center align-center ma-8">
            <MudText Typo="Typo.h3" Class="mb-4">Game Over!</MudText>
            <MudText Typo="Typo.h5">@(_gameOverInfo.Reason)</MudText>
            <MudSpacer></MudSpacer>
            <MudText Typo="Typo.caption">Room ID: @(_gameOverInfo.RoomId)</MudText>
        </MudContainer>
    </MudPaper>
}

@if (_hubConnection is null || _hubConnection.State != HubConnectionState.Connected)
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mud-height-full">
        <MudText Typo="Typo.h5" Class="pa-4 my-4">You are not connected to a server.</MudText>
        <MudText Typo="Typo.h6" Class="pa-4 mb-4">If this message persists, reload this page to establish a connection.</MudText>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mud-height-full pa-0">
        <MudGrid Class="mud-height-full px-4 pt-4">
            <MudItem xs="12" md="8" xl="9" xxl="10">
                @if (Game!.IsStarted)
                {
                    if (_useCardTable)
                    {
                        <CardTableGameInterface Game="Game" Hand="Hand" Turn="_currentTurn.ToImmutableList()" OnAddCardToTurn="AddCardToTurn" OnReorderCardInTurn="ReorderCardInTurn" OnRemoveCardFromTurn="RemoveCardFromTurn"/>
                    }
                    else
                    {
                        <CardListGameInterface Game="Game" Hand="Hand" Turn="_currentTurn.ToImmutableList()" OnAddCardToTurn="AddCardToTurn" OnReorderCardInTurn="ReorderCardInTurn" OnRemoveCardFromTurn="RemoveCardFromTurn"/>
                    }
                }
                else
                {
                    <MudText Typo="Typo.h5" Class="pa-4 mb-4">Waiting for players to join. (@Game.Hands.Count/4)</MudText>
                }
            </MudItem>
            <MudItem Class="mud-height-full overflow-y-scroll" xs="12" md="4" xl="3" xxl="2">
                <MudPaper Elevation="0" Class="mb-4">
                    <MudToolBar>
                        @if (Game!.IsStarted)
                        {
                            <MudTooltip Text="Pick card(s)">
                                <MudIconButton Icon="@Icons.Rounded.ArrowCircleUp" Color="Color.Inherit" OnClick="() => PerformTurn(new List<Card>())"/>
                            </MudTooltip>
                            <MudTooltip Text="Play card(s)">
                                <MudIconButton Icon="@Icons.Rounded.ArrowCircleDown" Color="Color.Inherit" OnClick="() => PerformTurn(_currentTurn)"/>
                            </MudTooltip>
                        }
                        else
                        {
                            <MudTooltip Text="@(IsCreator ? "Start Game" : "Only the creator can start the game.")">
                                <MudIconButton Icon="@Icons.Rounded.PlayArrow" Color="Color.Inherit" OnClick="StartGame" Disabled="!IsCreator"/>
                            </MudTooltip>
                        }

                        <MudTooltip Text="Leave Room">
                            <MudIconButton Icon="@Icons.Rounded.PersonRemove" Color="Color.Inherit" OnClick="() => LeaveRoom()"/>
                        </MudTooltip>
                    </MudToolBar>
                </MudPaper>

                <MudPaper Class="pa-4 mb-4" Elevation="0">
                    <div class="mb-2">
                        <MudSwitch @bind-Checked="_useCardTable" Color="Color.Primary" Label="Use Card Table interface (Experimental)"/>
                    </div>
                    <MudText Typo="Typo.caption" Class="text-grey">
                        The Card Table interface is still under development and, as such, may contain bugs. Use the Card List interface for best experience.
                    </MudText>
                </MudPaper>

                <DetailsUI Room="_room" Player="Player" OnSend="Send"/>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    private GameOverInfo? _gameOverInfo;
    private UIUser? Player => Hand?.User;
    private bool IsCreator => Player?.Email == _room?.Creator?.Email;
    private readonly List<Card> _currentTurn = new();
    private bool _useCardTable;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection.On<UIHand, int>("AddCardsToPlayerHand", (hand, num) =>
        {
            if (Game is null) return;
            var playerHand = Game.Hands.Single(h => h.User!.Email == hand.User!.Email);
            for (var i = 0; i < num; i++) playerHand.Cards.Add(new Card());
            StateHasChanged();
        });

        _hubConnection.On<List<Card>>("AddCardRangeToHand", cards =>
        {
            if (Hand is null) return;
            Hand.Cards.AddRange(cards);
            StateHasChanged();
        });

        _hubConnection.On<List<Card>>("AddCardRangeToPile", cards =>
        {
            if (Game is null) return;
            foreach (var card in cards) Game.Pile.Push(card);
            StateHasChanged();
        });

        _hubConnection.On<UIHand>("AddHandToRoom", hand =>
        {
            if (Game is null) return;
            Game.Hands.Add(hand);
            Snackbar.Add($"{hand.User!.Email} has joined the room", Severity.Info);
            StateHasChanged();
        });

        _hubConnection.On<string, UIUser>("EndGame", async (reason, winner) =>
        {
            if (_room is null) return;
            _gameOverInfo = new GameOverInfo(_room.InviteLink!, reason, winner);

            if (_gameOverInfo.Winner is not null && _gameOverInfo.Winner.Email == _username)
            {
                // TODO: Do something special for the winner (confetti?)
                Snackbar.Add("You won!", Severity.Success);
            }

            await LeaveRoom(true);
            StateHasChanged();
        });

        _hubConnection.On("NotifyTurnProcessed", () =>
        {
            _currentTurn.Clear();
            StateHasChanged();
        });

        _hubConnection.On<bool, Task<Card?>>("PromptCardRequest", async specific =>
        {
            var parameters = new DialogParameters { { nameof(CardRequestModal.Specific), specific } };
            var dialog = DialogService.Show<CardRequestModal>("Request a card", parameters);
            var result = await dialog.Result;
            return result.Cancelled ? null : (Card)result.Data;
        });

        _hubConnection.On<bool>("PromptLastCardRequest", async () =>
        {
            var dialog = DialogService.ShowMessageBox("Last Card?", "Are you on your last card?", "Yes!", "No");
            return (await dialog) ?? false;
        });

        _hubConnection.On<UIChat>("ReceiveChat", message =>
        {
            if (_room is null) return;
            _room.Chats.Add(message);
            var sender = message.Sender.Email;
            if (sender != _username) Snackbar.Add($"New message from {sender}.", Severity.Info);
            StateHasChanged();
        });

        _hubConnection.On<SystemMessage>("ReceiveSystemMessage", message =>
        {
            var severity = message.Type switch
            {
                MessageType.Error => Severity.Error,
                MessageType.Info => Severity.Info,
                MessageType.Success => Severity.Success,
                MessageType.Warning => Severity.Warning,
                _ => throw new ArgumentException("Invalid message type.", nameof(MessageType))
                };
            Snackbar.Add(message.Text, severity);
        });

        _hubConnection.On("ReclaimPile", () =>
        {
            if (Game is null) return;
            var cards = Game.Pile.Reclaim();
            Game.DeckCount += cards.Count;
            StateHasChanged();
        });

        _hubConnection.On<int>("RemoveCardsFromDeck", num =>
        {
            if (Game is null) return;
            Game.DeckCount -= num;
            StateHasChanged();
        });

        _hubConnection.On<UIHand, int>("RemoveCardsFromPlayerHand", (hand, num) =>
        {
            if (Game is null) return;
            var playerHand = Game.Hands.Single(h => h.User!.Email == hand.User!.Email);
            for (var i = 0; i < num; i++) playerHand.Cards.RemoveAt(0);
            StateHasChanged();
        });

        _hubConnection.On<List<Card>>("RemoveCardRangeFromHand", cards =>
        {
            if (Hand is null) return;
            Hand.Cards.RemoveAll(cards.Contains);
            StateHasChanged();
        });

        _hubConnection.On("RemoveFromRoom", () =>
        {
            _room = null;
            StateHasChanged();
        });

        _hubConnection.On<UIHand>("RemoveHandFromRoom", hand =>
        {
            if (Game is null) return;
            _ = Game.Hands.RemoveAll(h => h.User!.Email == hand.User!.Email);
            Snackbar.Add($"{hand.User!.Email} has left the room.", Severity.Info);
            StateHasChanged();
        });

        _hubConnection.On<Card>("SetCurrentRequest", request =>
        {
            if (Game is null) return;
            Game.CurrentRequest = request;
            StateHasChanged();
        });

        _hubConnection.On<int>("UpdateTurn", turn =>
        {
            if (Game is null) return;
            Game.CurrentTurn = turn;
            var current = Game.Hands[turn].User!.Email;
            var turnText = current == _username ? "your" : $"{current}'s";
            var message = $"It is now {turnText} turn.";
            Snackbar.Add(message, Severity.Info);
            StateHasChanged();
        });

        _hubConnection.On<bool>("UpdateGameStatus", started =>
        {
            if (Game is null) return;
            Game.IsStarted = started;
            if (started) Snackbar.Add("The game has started", Severity.Info);
            StateHasChanged();
        });
    }
    
    private void AddCardToTurn(ValueTuple<Card, int> info)
    {
        var (card, index) = info;
        _currentTurn.Insert(index, card);
        StateHasChanged();
    }

    private void ReorderCardInTurn(ValueTuple<Card, int> info)
    {
        var (card, index) = info;
        _currentTurn.Remove(card);
        _currentTurn.Insert(index, card);
        StateHasChanged();
    }

    private void RemoveCardFromTurn(Card card)
    {
        _currentTurn.Remove(card);
        StateHasChanged();
    }
} *@