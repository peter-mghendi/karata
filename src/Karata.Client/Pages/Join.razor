@page "/game/join"

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigator

<MudContainer MaxWidth="MaxWidth.Large" Class="mud-height-full">
    <MudText Typo="Typo.h5" Class="pa-4 my-4">Join or create a game room to play.</MudText>

    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudTextField @bind-Value="_link" Label="Invite Link" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Rounded.QrCodeScanner" Class="mb-4"></MudTextField>
        <MudButton Disabled="@Loading" OnClick="JoinRoom" Variant="Variant.Filled" Color="Color.Primary">
            @if (_joining)
            {
                <MudProgressCircular Indeterminate Class="ms-n1" Color="Color.Primary" Size="Size.Small" />
                <MudText Class="ms-2">Joining Room</MudText>
            }
            else
            {
                <MudText>Join Room</MudText>
            }
        </MudButton>
    </MudPaper>

    <MudPaper Class="pa-4 mb-4" Elevation="0">
        <MudTextField @bind-Value="_password" Label="Password (Optional)" Variant="Variant.Filled" Class="mb-4"></MudTextField>
        <MudButton Disabled="@Loading" OnClick="CreateRoom" Variant="Variant.Filled">
            @if (_creating)
            {
                <MudProgressCircular Indeterminate Class="ms-n1" Size="Size.Small" />
                <MudText Class="ms-2">Creating Room</MudText>
            }
            else
            {
                <MudText>Create Room</MudText>
            }
        </MudButton>
    </MudPaper>   
</MudContainer>

@code {
    private string _link = string.Empty;
    private string _password = string.Empty;

    private bool _joining;
    private bool _creating;
    
    private bool Loading => _joining || _creating;

    private async Task JoinRoom()
    {
        _joining = true;
        if (string.IsNullOrWhiteSpace(_link))
        {
            _joining = false;
            Snackbar.Add("Invite link cannot be empty.", Severity.Error);
            return;
        }

        var room = await Http.GetFromJsonAsync<RoomData>($"api/room/{_link}");
        if (room == null)
        {
            _joining = false;
            Snackbar.Add("Failed to join room. Please try again later.", Severity.Error);
            StateHasChanged();
            return;
        }

        Navigator.NavigateTo($"/game/{room.Id.ToString()}/play");
    }

    private async Task CreateRoom()
    {
        _creating = true;
        var response = await Http.PostAsJsonAsync("api/room", new RoomRequest { Password = _password });
        if (!response.IsSuccessStatusCode)
        {
            _creating = false;
            Snackbar.Add("Failed to create room. Please try again later.", Severity.Error);
            StateHasChanged();
            return;
        }
        
        var room = await response.Content.ReadFromJsonAsync<RoomData>();
        if (room == null)
        {
            _creating = false;
            Snackbar.Add("Failed to create room. Please try again later.", Severity.Error);
            StateHasChanged();
            return;
        }

        Navigator.NavigateTo($"/game/{room.Id.ToString()}/play");
    }
}