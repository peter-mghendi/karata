@page "/game/join"

@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigator

<MudContainer MaxWidth="MaxWidth.Large" Class="mud-height-full">
    <MudText Typo="Typo.h5" Class="pa-4 my-4">Join or create a game room to play.</MudText>

    <MudPaper Class="pa-4 mb-4">
        <MudTextField @bind-Value="link" Label="Invite Link" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentIcon="Icons.Filled.QrCodeScanner" Class="mb-4"></MudTextField>
        <MudButton Disabled="@loading" OnClick="JoinRoom" Variant="Variant.Filled" Color="Color.Primary">
            @if (joining)
            {
                <MudProgressCircular Class="ms-n1" Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Joining Room</MudText>
            }
            else
            {
                <MudText>Join Room</MudText>
            }
        </MudButton>
    </MudPaper>

    <MudPaper Class="pa-4 mb-4">
        <MudTextField @bind-Value="password" Label="Password (Optional)" Variant="Variant.Filled" Class="mb-4"></MudTextField>
        <MudButton Disabled="@loading" OnClick="CreateRoom" Variant="Variant.Filled">
            @if (creating)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Creating Room</MudText>
            }
            else
            {
                <MudText>Create Room</MudText>
            }
        </MudButton>
    </MudPaper>   
</MudContainer>

@code {
    private string link = string.Empty;
    private string password = string.Empty;

    private bool joining;
    private bool creating;
    private bool loading => joining || creating;

    private async Task JoinRoom()
    {
        joining = true;
        if (string.IsNullOrWhiteSpace(link))
        {
            joining = false;
            Snackbar.Add("Invite link cannot be empty.", Severity.Error);
            return;
        }

        var room = await Http.GetFromJsonAsync<RoomData>($"api/room/{link}");
        if (room == null)
        {
            joining = false;
            Snackbar.Add("Failed to join room. Please try again later.", Severity.Error);
            StateHasChanged();
            return;
        }

        Navigator.NavigateTo($"/game/{room.Id.ToString()}/play");
    }

    private async Task CreateRoom()
    {
        creating = true;
        var response = await Http.PostAsync("api/room", null);
        if (!response.IsSuccessStatusCode)
        {
            creating = false;
            Snackbar.Add("Failed to create room. Please try again later.", Severity.Error);
            StateHasChanged();
            return;
        }
        
        var room = await response.Content.ReadFromJsonAsync<RoomData>();
        if (room == null)
        {
            creating = false;
            Snackbar.Add("Failed to create room. Please try again later.", Severity.Error);
            StateHasChanged();
            return;
        }

        Navigator.NavigateTo($"/game/{room.Id.ToString()}/play");
    }
}